<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNLP</name>
    </assembly>
    <members>
        <member name="T:OpenNLP.Tools.Chunker.ChunkerEventReader">
            <summary> 
            Class for creating an event reader out of data files for training a chunker. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.ChunkerEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String})">
            <summary>
            Creates a new event reader based on the specified data reader.
            </summary>
            <param name="dataReader">
            The data reader for this event reader.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.ChunkerEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String},OpenNLP.Tools.Chunker.IChunkerContextGenerator)">
            <summary>
            Creates a new event reader based on the specified data reader using the specified context generator.
            </summary>
            <param name="dataReader">
            The data reader for this event reader.
            </param>
            <param name="contextGenerator">
            The context generator which should be used in the creation of events for this event reader.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.ChunkerEventReader.ReadNextEvent">
            <summary> 
            Returns the next TrainingEvent object held in this TrainingEventReader.
            </summary>
            <returns>
            the TrainingEvent object which is next in this TrainingEventReader
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.ChunkerEventReader.HasNext">
            <summary> 
            Test whether there are any TrainingEvents remaining in this TrainingEventReader.
            </summary>
            <returns>
            true if this TrainingEventReader has more TrainingEvents
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.DefaultChunkerContextGenerator">
            <summary>
            Features based on chunking model described in Fei Sha and Fernando Pereira. Shallow 
            parsing with conditional random fields. In Proceedings of HLT-NAACL 2003. Association 
            for Computational Linguistics, 2003.
            </summary>
            <author> 
            Tom Morton
            </author>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.IChunkerContextGenerator">
            <summary>
            Context generator interface for chunkers.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.IBeamSearchContextGenerator">
            <summary>
            Interface for a context generator that uses a beam search. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.IBeamSearchContextGenerator.GetContext(System.Int32,System.Object[],System.String[],System.Object[])">
            <summary>
            Returns the context for the specified position in the specified sequence (list).  </summary>
            <param name="index">
            The index of the sequence.
            </param>
            <param name="sequence">
            The sequence of items over which the beam search is performed.
            </param>
            <param name="priorDecisions">
            The sequence of decisions made prior to the context for which this decision is being made.
            </param>
            <param name="additionalContext">
            Any addition context specific to a class implementing this interface.
            </param>
            <returns>
            the context for the specified position in the specified sequence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.IChunkerContextGenerator.GetContext(System.Int32,System.Object[],System.String[],System.String[])">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="tokenIndex">
            The index of the token in the specified toks array for which the context should be constructed. 
            </param>
            <param name="tokens">
            The tokens of the sentence.  The <code>toString</code> methods of these objects should return the token text.
            </param>
            <param name="tags">
            The POS tags for the the specified tokens.
            </param>
            /// <param name="previousDecisions">
            The previous decisions made in the tagging of this sequence.  Only indices less than tokenIndex will be examined.
            </param>
            <returns>
            An array of predictive contexts on which a model basis its decisions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.DefaultChunkerContextGenerator.#ctor">
            <summary>
            Creates the default context generator for a chunker.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.DefaultChunkerContextGenerator.GetContext(System.Object)">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="input">
            An object array containing:
            at index [0]: integer value, the index of the token in the tokens array for which the context should be constructed.
            at index [1]: object array, the ToString() methods of these objects make up the tokens of the sentence
            at index [2]: a Util.Sequence of previous decisions
            at index [3]: a string array, the POS tags for the specified tokens 
            </param>
            <returns>
            An array of predictive contexts on which a model bases its decisions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.DefaultChunkerContextGenerator.GetContext(System.Int32,System.Object[],System.String[],System.Object[])">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="index">
            The index of the token in the specified tokens array for which the context should be constructed. 
            </param>
            <param name="sequence">
            The tokens of the sentence.  The <code>ToString</code> methods of these objects should return the token text.
            </param>
            <param name="priorDecisions">
            The previous decisions made in the tagging of this sequence.  Only indices less than index will be examined.
            </param>
            <param name="additionalContext">
            Object array of additional context information. The first object in the array is expected to be a string array
            containing the POS tags for the the specified tokens.
            </param>
            <returns>
            An array of predictive contexts on which a model bases its decisions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.DefaultChunkerContextGenerator.GetContext(System.Int32,System.Object[],System.String[],System.String[])">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="tokenIndex">
            The index of the token in the specified tokens array for which the context should be constructed. 
            </param>
            <param name="tokens">
            The tokens of the sentence.  The <code>ToString</code> methods of these objects should return the token text.
            </param>
            <param name="tags">
            The POS tags for the the specified tokens.
            </param>
            <param name="predicates">
            The previous decisions made in the tagging of this sequence.  Only indices less than tokenIndex will be examined.
            </param>
            <returns>
            An array of predictive contexts on which a model bases its decisions.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.EnglishTreebankChunker">
            <summary>
            This is a chunker based on the CONLL chunking task which uses Penn Treebank constituents as the basis for the chunks.
            See   http://cnts.uia.ac.be/conll2000/chunking/ for data and task definition.
            </summary>
            <author> 
            Tom Morton
            </author>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.MaximumEntropyChunker">
            <summary>
            This class represents a maximum-entropy-based chunker.  Such a chunker can be used to
            find flat structures based on sequence inputs such as noun phrases or named entities.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.IChunker">
            <summary>
            The interface for chunkers which provide chunk tags for a sequence of tokens.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.IChunker.Chunk(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Generates chunk tags for the given sequence returning the result in a list.
            </summary>
            <param name="tokens">
            a list of the tokens or words of the sequence.
            </param>
            <param name="tags">
            a list of the pos tags of the sequence.
            </param>
            <returns>
            a list of chunk tags for each token in the sequence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.IChunker.Chunk(System.Object[],System.String[])">
            <summary>
            Generates chunk tags for the given sequence returning the result in an array.
            </summary>
            <param name="tokens">
            an array of the tokens or words of the sequence.
            </param>
            <param name="tags">
            an array of the pos tags of the sequence.
            </param>
            <returns>
            an array of chunk tags for each token in the sequence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.#ctor(SharpEntropy.IMaximumEntropyModel)">
            <summary>
            Creates a chunker using the specified model.
            </summary>
            <param name="model">
            The maximum entropy model for this chunker.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.#ctor(SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.Chunker.IChunkerContextGenerator)">
            <summary>
            Creates a chunker using the specified model and context generator.
            </summary>
            <param name="model">
            The maximum entropy model for this chunker.
            </param>
            <param name="contextGenerator">
            The context generator to be used by the specified model.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.#ctor(SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.Chunker.IChunkerContextGenerator,System.Int32)">
            <summary>
            Creates a chunker using the specified model and context generator and decodes the
            model using a beam search of the specified size.
            </summary>
            <param name="model">
            The maximum entropy model for this chunker.
            </param>
            <param name="contextGenerator">
            The context generator to be used by the specified model.
            </param>
            <param name="beamSize">
            The size of the beam that should be used when decoding sequences.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Chunk(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Performs a chunking operation.
            </summary>
            <param name="tokens">
            ArrayList of tokens
            </param>
            <param name="tags">
            ArrayList of tags corresponding to the tokens
            </param>
            <returns>
            ArrayList of results, containing a value for each token, indicating the chunk that that token belongs to.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Chunk(System.Object[],System.String[])">
            <summary>
            Performs a chunking operation.
            </summary>
            <param name="tokens">
            Object array of tokens
            </param>
            <param name="tags">
            String array of POS tags corresponding to the tokens in the object array
            </param>
            <returns>
            String array containing a value for each token, indicating the chunk that that token belongs to.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.AllTags">
            <summary>
            Gets a list of all the possible chunking tags.
            </summary>
            <returns>
            String array, each entry containing a chunking tag.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.ValidOutcome(System.String,OpenNLP.Tools.Util.Sequence)">
            <summary>
            This method determines wheter the outcome is valid for the preceding sequence.  
            This can be used to implement constraints on what sequences are valid.  
            </summary>
            <param name="outcome">
            The outcome.
            </param>
            <param name="sequence">
            The preceding sequence of outcomes assignments. 
            </param>
            <returns>
            true if the outcome is valid for the sequence, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.ValidOutcome(System.String,System.String[])">
            <summary>
            This method determines wheter the outcome is valid for the preceeding sequence.  
            This can be used to implement constraints on what sequences are valid.  
            </summary>
            <param name="outcome">
            The outcome.
            </param>
            <param name="sequence">
            The preceding sequence of outcomes assignments. 
            </param>
            <returns>
            true if the outcome is valid for the sequence, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.GetProbabilities(System.Double[])">
            <summary>
            Populates the specified array with the probabilities of the last decoded sequence.  The
            sequence was determined based on the previous call to <code>chunk</code>.  The 
            specified array should be at least as large as the numbe of tokens in the previous call to <code>chunk</code>.
            </summary>
            <param name="probabilities">
            An array used to hold the probabilities of the last decoded sequence.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.GetProbabilities">
            <summary>
            Returns an array with the probabilities of the last decoded sequence.  The
            sequence was determined based on the previous call to <code>chunk</code>.
            </summary>
            <returns>
            An array with the same number of probabilities as tokens were sent to <code>chunk</code>
            when it was last called.   
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Train(SharpEntropy.ITrainingEventReader)">
            <summary>
            Trains the chunker.  Training file should be one word per line where each line consists of a
            space-delimited triple of "word pos outcome".  Sentence breaks are indicated by blank lines.
            </summary>
            <param name="eventReader">
            The chunker event reader.
            </param>
            <returns>
            Trained model.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Train(SharpEntropy.ITrainingEventReader,System.Int32,System.Int32)">
            <summary>
            Trains the chunker.  Training file should be one word per line where each line consists of a
            space-delimited triple of "word pos outcome".  Sentence breaks are indicated by blank lines.
            </summary>
            <param name="eventReader">
            The chunker event reader.
            </param>
            <param name="iterations">
            The number of iterations to perform.
            </param>
            <param name="cutoff">
            The number of times a predicate must be seen in order
            to be relevant for training.
            </param>
            <returns>
            Trained model.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Beam">
            <summary>
            The beam used to search for sequences of chunk tag assignments.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Chunker.MaximumEntropyChunker.Model">
            <summary>
            The model used to assign chunk tags to a sequence of tokens.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Chunker.MaximumEntropyChunker.ChunkBeamSearch">
            <summary>
            This class implements the abstract BeamSearch class to allow for the chunker to use
            the common beam search code. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.BeamSearch">
            <summary>
            Performs k-best search over sequence.  This is besed on the description in
            Ratnaparkhi (1998), PhD diss, Univ. of Pennsylvania. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.#ctor(System.Int32,OpenNLP.Tools.Util.IBeamSearchContextGenerator,SharpEntropy.IMaximumEntropyModel)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">
            The size of the beam (k).
            </param>
            <param name="contextGenerator">
            the context generator for the model. 
            </param>
            <param name="model">
            the model for assigning probabilities to the sequence outcomes.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.#ctor(System.Int32,OpenNLP.Tools.Util.IBeamSearchContextGenerator,SharpEntropy.IMaximumEntropyModel,System.Int32)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">
            The size of the beam (k).
            </param>
            <param name="contextGenerator">
            the context generator for the model. 
            </param>
            <param name="model">
            the model for assigning probabilities to the sequence outcomes.
            </param>
            <param name="cacheSize">
            size of the cache to use for performance.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.BestSequences(System.Int32,System.Object[],System.Object[])">
            <summary>
            Returns the best sequence of outcomes based on model for this object.</summary>
            <param name="numSequences">
            The maximum number of sequences to be returned.
            </param>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="additionalContext">
            An object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
            </param>
            <returns>
            An array of the top ranked sequences of outcomes.
            </returns>		
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.BestSequences(System.Int32,System.Object[],System.Object[],System.Double)">
            <summary>
            Returns the best sequence of outcomes based on model for this object.</summary>
            <param name="numSequences">
            The maximum number of sequences to be returned.
            </param>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="additionalContext">
            An object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
            </param>
            <param name="minSequenceScore">
            A lower bound on the score of a returned sequence.</param> 
            <returns>
            An array of the top ranked sequences of outcomes.
            </returns>		
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.BestSequence(System.Collections.ArrayList,System.Object[])">
            <summary>
            Returns the best sequence of outcomes based on model for this object.
            </summary>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="additionalContext">
            An object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
            </param>
            <returns>
            The top ranked sequence of outcomes.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.BestSequence(System.Object[],System.Object[])">
            <summary>
            Returns the best sequence of outcomes based on model for this object.
            </summary>
            <param name="sequence">
            The input sequence.
            </param>
            <param name="additionalContext">
            An object[] of additional context.  This is passed to the context generator blindly with the assumption that the context are appropiate.
            </param>
            <returns>
            The top ranked sequence of outcomes.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.ValidSequence(System.Int32,System.Collections.ArrayList,OpenNLP.Tools.Util.Sequence,System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.  
            This is used to restrict invalid sequences such as thoses used in start/continue tag-based chunking 
            or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">
            The index in the input sequence for which the new outcome is being proposed.
            </param>
            <param name="inputSequence">
            The input sequnce.
            </param>
            <param name="outcomesSequence">
            The outcomes so far in this sequence.
            </param>
            <param name="outcome">
            The next proposed outcome for the outcomes sequence.
            </param>
            <returns>
            true if the sequence would still be valid with the new outcome, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.BeamSearch.ValidSequence(System.Int32,System.Object[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.  
            This is used to restrict invalid sequences such as thoses used in start/continure tag-based chunking 
            or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">
            The index in the input sequence for which the new outcome is being proposed.
            </param>
            <param name="inputSequence">
            The input sequnce.
            </param>
            <param name="outcomesSequence">
            The outcomes so far in this sequence.
            </param>
            <param name="outcome">
            The next proposed outcome for the outcomes sequence.
            </param>
            <returns>
            true if the sequence would still be valid with the new outcome, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.EnglishTreebankChunker.#ctor(System.String)">
            <summary>
            Creates an English Treebank Chunker which uses the specified model file.
            </summary>
            <param name="modelFile">
            The name of the maxent model to be used.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.EnglishTreebankChunker.ValidOutcome(System.String,OpenNLP.Tools.Util.Sequence)">
            <summary>
            This method determines whether the outcome is valid for the preceding sequence.  
            This can be used to implement constraints on what sequences are valid.  
            </summary>
            <param name="outcome">
            The outcome.
            </param>
            <param name="sequence">
            The preceding sequence of outcome assignments. 
            </param>
            <returns>
            true if the outcome is valid for the sequence, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.EnglishTreebankChunker.GetChunks(System.String[],System.String[])">
            <summary>
            Gets formatted chunk information for a specified sentence.
            </summary>
            <param name="tokens">
            string array of tokens in the sentence
            </param>
            <param name="tags">
            string array of POS tags for the tokens in the sentence
            </param>
            <returns>
            A string containing the formatted chunked sentence
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Chunker.EnglishTreebankChunker.GetChunks(System.String)">
            <summary>
            Gets formatted chunk information for a specified sentence.
            </summary>
            <param name="data">
            a string containing a list of tokens and tags, separated by / characters. For example:
            Battle-tested/JJ Japanese/NNP industrial/JJ managers/NNS 
            </param>
            <returns>
            A string containing the formatted chunked sentence
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.AbstractLinker">
            <summary>
            Provides a default implementation of many of the methods in <code>ILinker</code> that
            most implementations of <code>ILinker</code> will want to extend.  
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.ILinker">
            <summary>
            A linker provides an interface for finding mentions, {@link #MentionFinder MentionFinder}, 
            and creating entities out of those mentions, {@link #GetEntitiesFromMentions getEntitiesFromMentions}.  This interface also allows
            for the training of a resolver with the method {@link #SetEntititesFromMentions setEntititesFromMentions} which is used to give the
            resolver mentions whose entityId fields indicate which mentions refer to the same entity and the 
            {@link #Train Train} method which compiles all the information provided via calls to 
            {@link #SetEntititesFromMentions SetEntititesFromMentions} into a model.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.ILinker.SetEntitiesFromMentions(OpenNLP.Tools.Coreference.Mention.Mention[])">
            <summary>
            Indicated that the specified mentions can be used to train this linker.
            This requires that the coreference relationship between the mentions have been labeled
            in the mention's id field.
            </summary>
            <param name="mentions">
            The mentions to be used to train the linker.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.ILinker.GetEntitiesFromMentions(OpenNLP.Tools.Coreference.Mention.Mention[])">
            <summary>
            Returns a list of entities which group the mentions into entity classes.
            </summary>
            <param name="mentions">A array of mentions. 
            </param>
            <returns>
            An array of discourse entities.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.ILinker.ConstructMentionContexts(OpenNLP.Tools.Coreference.Mention.Mention[])">
            <summary>
            Creates mention contexts for the specified mention exents.  These are used to compute coreference features over.
            </summary>
            <param name="mentions">
            The mention of a document.
            </param>
            <returns>
            mention contexts for the specified mention exents.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.ILinker.Train">
            <summary>
            Trains the linker based on the data specified via calls to {@link #SetEntities SetEntities}.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.ILinker.MentionFinder">
            <summary>
            The mention finder for this linker.  This can be used to get the mentions of a Parse.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.ILinker.HeadFinder">
            <summary>
            The head finder associated with this linker.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mMentionFinder">
            <summary>
            The mention finder used to find mentions.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mMode">
            <summary>The mode in which this linker is running. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mResolvers">
            <summary>The resolvers used by this Linker. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mEntities">
            <summary>Array used to store the results of each call made to the linker. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mSingularPronounIndex">
            <summary>The index of resolver which is used for singular pronouns. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mCoreferenceProjectName">
            <summary>The name of the project where the coreference models are stored. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mHeadFinder">
            <summary>The head finder used in this linker. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mUseDiscourseModel">
            <summary>Specifies whether coreferent mentions should be combined into a single entity. 
            Set this to true to combine them, false otherwise.  
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.AbstractLinker.mRemoveUnresolvedMentions">
            <summary>Specifies whether mentions for which no resolver can be used should be added to the
            discourse model.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.AbstractLinker.#ctor(System.String,OpenNLP.Tools.Coreference.LinkerMode)">
            <summary> 
            Creates a new linker using the models in the specified project directory and using the specified mode.
            </summary>
            <param name="project">
            The location of the models or other data needed by this linker.
            </param>
            <param name="mode">
            The mode the linker should be run in: testing, training, or evaluation.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.AbstractLinker.#ctor(System.String,OpenNLP.Tools.Coreference.LinkerMode,System.Boolean)">
            <summary> 
            Creates a new linker using the models in the specified project directory, using the specified mode, 
            and combining coreferent entities based on the specified value.
            </summary>
            <param name="project">
            The location of the models or other data needed by this linker.
            </param>
            <param name="mode">
            The mode the linker should be run in: testing, training, or evaluation.
            </param>
            <param name="useDiscourseModel">
            Specifies whether coreferent mention should be combined or not.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.AbstractLinker.Resolve(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseModel)">
            <summary>
            Removes the specified mention to an entity in the specified discourse model or creates a new entity for the mention.
            </summary>
            <param name="mention">
            The mention to resolve.
            </param>
            <param name="discourseModel">
            The discourse model of existing entities.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.AbstractLinker.UpdateExtent(OpenNLP.Tools.Coreference.DiscourseModel,OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity,System.Boolean)">
            <summary>
            Updates the specified discourse model with the specified mention as coreferent with the specified entity. 
            </summary>
            <param name="discourseModel">
            The discourse model
            </param>
            <param name="mention">
            The mention to be added to the specified entity.
            </param>
            <param name="entity">
            The entity which is mentioned by the specified mention.  
            </param>
            <param name="useDiscourseModel">
            Whether the mentions should be kept as an entiy or simply co-indexed.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.DefaultLinker">
            <summary>
            This class perform coreference for treebank style parses or for noun-phrase chunked data.    
            Non-constituent entites such as pre-nominal named-entities and sub entities in simple coordinated
            noun phases will be created.  This linker requires that named-entity information also be provided.   
            This information can be added to the parse using the -parse option with EnglishNameFinder. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.#ctor(System.String,OpenNLP.Tools.Coreference.LinkerMode)">
            <summary>
            Creates a new linker with the specified model directory, running in the specified mode.
            </summary>
            <param name="modelDirectory">
            The directory where the models for this linker are kept.
            </param>
            <param name="mode">
            The mode that this linker is running in.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.#ctor(System.String,OpenNLP.Tools.Coreference.LinkerMode,System.Boolean)">
            <summary>
            Creates a new linker with the specified model directory, running in the specified mode which uses a discourse model
            based on the specified parameter.
            </summary>
            <param name="modelDirectory">
            The directory where the models for this linker are kept.
            </param>
            <param name="mode">
            The mode that this linker is running in.
            </param>
            <param name="useDiscourseModel">
            Whether the model should use a discourse model or not.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.#ctor(System.String,OpenNLP.Tools.Coreference.LinkerMode,System.Boolean,System.Double)">
            <summary>
            Creates a new linker with the specified model directory, running in the specified mode which uses a discourse model
            based on the specified parameter and uses the specified fixed non-referential probability.
            </summary>
            <param name="modelDirectory">
            The directory where the models for this linker are kept.
            </param>
            <param name="mode">
            The mode that this linker is running in.
            </param>
            <param name="useDiscourseModel">
            Whether the model should use a discourse model or not.
            </param>
            <param name="fixedNonReferentialProbability">
            The probability which resolvers are required to exceed to posit a coreference relationship.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.InitializeResolvers(OpenNLP.Tools.Coreference.LinkerMode,System.Double)">
            <summary>
            Initializes the resolvers used by this linker.
            </summary>
            <param name="mode">
            The mode in which this linker is being used.
            </param>
            <param name="fixedNonReferentialProbability">
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.InitializeHeaderFinder">
            <summary> 
            Initializes the head finder for this linker.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DefaultLinker.InitializeMentionFinder">
            <summary> 
            Initializes the mention finder for this linker.  
            This can be overridden to change the space of mentions used for coreference. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.DiscourseElement">
            <summary>
            Represents an item in which can be put into the discourse model.  Object which are
            to be placed in the discourse model should extend this class.
            </summary>
            <seealso cref="T:OpenNLP.Tools.Coreference.DiscourseModel">
            </seealso>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseElement.#ctor(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Creates a new discourse element which contains the specified mention.
            </summary>
            <param name="mention">
            The mention which begins this discourse element.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseElement.AddMention(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Adds the specified mention to this discourse element.
            </summary>
            <param name="mention">
            The mention to be added.
            </param>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseElement.RecentMentions">
            <summary>
            An iterator over the mentions which iteratates through them based on which were most recently mentioned.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseElement.Mentions">
            <summary>
            An iterator over the mentions which iteratates through them based on their occurance in the document.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseElement.MentionCount">
            <summary>
            The number of mentions in this element.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseElement.LastExtent">
            <summary>
            The last mention for this element.  For appositives this will be the
            first part of the appositive.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseElement.Id">
            <summary>
            The id associated with this element.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.DiscourseEntity">
            <summary>
            Represents an entity in a discourse model.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseEntity.#ctor(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.Similarity.GenderEnum,System.Double,OpenNLP.Tools.Coreference.Similarity.NumberEnum,System.Double)">
            <summary>
            Creates a new entity based on the specified mention and its specified gender and number properties.
            </summary>
            <param name="mention">
            The first mention of this entity.
            </param>
            <param name="gender">
            The gender of this entity.
            </param>
            <param name="genderProbability">
            The probability that the specified gender is correct.
            </param>
            <param name="number">
            The number for this entity.
            </param>
            <param name="numberProbability">
            The probability that the specified number is correct.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseEntity.#ctor(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Creates a new entity based on the specified mention.
            </summary>
            <param name="mention">
            The first mention of this entity.
            </param>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseEntity.Category">
            <summary>
            The semantic category of this entity.  This field is used to associated named-entity categories with an entity.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseEntity.Synsets">
            <summary>
            The set of synsets associated with this entity.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseEntity.Gender">
            <summary>
            The gender associated with this entity.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseEntity.GenderProbability">
            <summary>
            The probability for the gender associated with this entity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OpenNLP.Tools.Coreference.DiscourseEntity.Number" -->
        <member name="P:OpenNLP.Tools.Coreference.DiscourseEntity.NumberProbability">
            <summary>
            The probability for the number associated with this entity.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.DiscourseModel">
            <summary>
            Represents the elements which are part of a discourse.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.#ctor">
            <summary> 
            Creates a new discourse model.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.MentionEntity(OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Indicates that the specified entity has been mentioned.</summary>
            <param name="entity">
            The entity which has been mentioned.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.GetEntity(System.Int32)">
            <summary>
            Returns the entity at the specified index.
            </summary>
            <param name="index">
            the index of the entity to be returned.
            </param>
            <returns>
            the entity at the specified index.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.AddEntity(OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Adds the specified entity to this discourse model.
            </summary>
            <param name="entity">
            the entity to be added to the model. 
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.MergeEntities(OpenNLP.Tools.Coreference.DiscourseEntity,OpenNLP.Tools.Coreference.DiscourseEntity,System.Single)">
            <summary>
            Merges the specified entities into a single entity with the specified confidence.
            </summary>
            <param name="firstEntity">
            The first entity. 
            </param>
            <param name="secondEntity">
            The second entity.
            </param>
            <param name="confidence">
            The confidence.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.DiscourseModel.Clear">
            <summary>
            Removes all elements from this discourse model.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseModel.EntityCount">
            <summary>
            The number of entities in this discourse model
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.DiscourseModel.Entities">
            <summary>
            The entities in the discourse model
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.Descriptor">
            <summary>
            String constant used to label a mention which is a description.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.IsA">
            <summary>
            String constant used to label an mention in an appositive relationship. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.CombinedNounPhrases">
            <summary>
            String constant used to label a mention which consists of two or more noun phrases. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.SingleNounPhrase">
            <summary>
            String constant used to label a mention which consists of a single noun phrase. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.ProperNounModifier">
            <summary>
            String constant used to label a mention which is a proper noun modifing another noun. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.PronounModifier">
            <summary>
            String constatant used to label a mention which is a pronoun.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.SingularThirdPersonPronounPattern">
            <summary>
            Regular expression for English singular third person pronouns.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.PluralThirdPersonPronounPattern">
            <summary>
            Regular expression for English plural third person pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.SpeechPronounPattern">
            <summary>
            Regular expression for English speech pronouns.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.MalePronounPattern">
            <summary>
            Regular expression for English male pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.FemalePronounPattern">
            <summary>
            Regular expression for English female pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.NeuterPronounPattern">
            <summary>
            Regular expression for English nueter pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.FirstPersonPronounPattern">
            <summary>
            Regular expression for English first person pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.SecondPersonPronounPattern">
            <summary>
            Regular expression for English singular second person pronouns.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.ThirdPersonPronounPattern">
            <summary>
            Regular expression for English third person pronouns.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.SingularPronounPattern">
            <summary>
            Regular expression for English singular pronouns. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.PluralPronounPattern">
            <summary>
            Regular expression for English plural pronouns.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.HonorificsPattern">
            <summary>
            Regular expression for English honorifics. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Linker.DesignatorsPattern">
            <summary>
            Regular expression for English corporate designators. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.LinkerMode">
            <summary>
            Enumeration of modes in which a linker can run.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.LinkerMode.Test">
            <summary>
            Testing mode, used to identify coreference relationships in un-annotated text. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.LinkerMode.Train">
            <summary>
            Training mode, used to learn coreference relationships in annotated text.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.LinkerMode.Eval">
            <summary>
            Evaluation mode, used to evaluate identifed coreference relationships based on annotated text.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.LinkerMode.Sim">
            <summary>
            Training mode, used to learn coreference relationships in annotated text.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.AbstractMentionFinder">
            <summary>
            Provides default implementation of many of the methods in the IMentionFinder interface.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.IMentionFinder">
            <summary>
            Specifies the interface that objects that determine the space of mentions for coreference should implement.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IMentionFinder.GetMentions(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns an array of mentions.
            </summary>
            <param name="parse">
            A top level parse from which mentions are gathered.
            </param>
            <returns>
            An array of mentions.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IMentionFinder.PrenominalNamedEntitiesCollection">
            <summary>
            Specifies whether pre-nominal named-entities should be collected as mentions.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IMentionFinder.CoordinatedNounPhrasesCollection">
            <summary>
            Specifies whether coordinated noun phrases should be collected as mentions.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.AbstractMentionFinder.ConstructHeadMap(System.Collections.Generic.List{OpenNLP.Tools.Coreference.Mention.IParse})">
            <summary>
            Assigns head relations between noun phrases and the child noun phrase
            which is their head.
            </summary>
            <param name="nounPhrases">
            List of valid noun phrases for this mention finder.
            </param>
            <returns>
            mapping from noun phrases and the child noun phrase which is their head
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.AbstractMentionFinder.CollectPrenominalNamedEntities(OpenNLP.Tools.Coreference.Mention.IParse,System.Collections.Generic.List{OpenNLP.Tools.Coreference.Mention.Mention})">
            <summary> 
            Adds a mention for the non-treebank-labeled possesive noun phrases.  
            </summary>
            <param name="possesiveNounPhrase">
            The possessive noun phase which may require an additional mention.
            </param>
            <param name="mentions">
            The list of mentions into which a new mention can be added. 
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.AbstractMentionFinder.GetNamedEntities(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Return all noun phrases which are contained by <code>parse</code>.
            </summary>
            <param name="parse">
            The parse in which to find the noun phrases. 
            </param>
            <returns>
            A list of <code>IParse</code> objects which are noun phrases contained by <code>parse</code>.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.AbstractParse">
            <summary>
            Provides default implemenation of many of the methods in the IParse interface.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.IParse">
            <summary>
            Interface for syntactic and named-entity information to be used in coreference annotation.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.SentenceNumber">
            <summary>
            Returns the index of the sentence which contains this parse.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.NounPhrases">
            <summary>
            Returns a list of the all noun phrases contained by this parse.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.NamedEntities">
            <summary>
            Returns a list of all the named entities contained by this parse.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.Children">
            <summary>
            Returns a list of the children to this object.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.SyntacticChildren">
            <summary>
            Returns a list of the children to this object which are constituents or tokens.
            This allows implementations which contain addition nodes for things such as semantic 
            categories to hide those nodes from the components which only care about syntactic nodes. 
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.Tokens">
            <summary>
            Returns a list of the tokens contained by this object.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.SyntacticType">
            <summary>
            Returns the syntactic type of this node. Typically this is the part-of-speech or 
            constituent labeling.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.EntityType">
            <summary>
            Returns the named-entity type of this node.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.ParentNac">
            <summary>
            Determines whether this has an ancestor of type NAC.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.Parent">
            <summary>
            Returns the parent parse of this parse node.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.IsNamedEntity">
            <summary>
            Specifies whether this parse is a named-entity.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.IsNounPhrase">
            <summary>
            Specifies whether this parse is a noun phrase.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.IsSentence">
            <summary>
            Specifies whether this parse is a sentence.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.IsCoordinatedNounPhrase">
            <summary>
            Specifies whether this parse is a coordinated noun phrase.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.IsToken">
            <summary>
            Specifies whether this parse is a token.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.EntityId">
            <summary>
            Returns an entity id associated with this parse and coreferent parses.  This is only used for training on
            already annotated coreference annotation.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.Span">
            <summary>
            Returns the character offsets of this parse node.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.PreviousToken">
            <summary>
            Returns the first token which is not a child of this parse.  If the first token of a sentence is
            a child of this parse then null is returned.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.IParse.NextToken">
            <summary>
            Returns the next token which is not a child of this parse.  If the last token of a sentence is
            a child of this parse then null is returned.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.DefaultParse">
            <summary>
            This class is a wrapper for {@link OpenNLP.Tools.Parser.Parse} mapping it to the API specified in
            {@link OpenNLP.Tools.Coreference.Mention.Parse}.
            This allows coreference to be done on the output of the parser.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.IDictionary">
            <summary>
            Interface to provide dictionary information to the coreference module assuming a
            hierarchically structured dictionary (such as WordNet) is available. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IDictionary.GetLemmas(System.String,System.String)">
            <summary>
            Returns the lemmas of the specified word with the specified part-of-speech.
            </summary>
            <param name="word">
            The word whose lemmas are desired.
            </param>
            <param name="partOfSpeech">The part-of-speech of the specified word.
            </param>
            <returns>
            The lemmas of the specified word given the specified part-of-speech.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IDictionary.GetSenseKey(System.String,System.String,System.Int32)">
            <summary> 
            Returns a key indicating the specified sense number of the specified 
            lemma with the specified part-of-speech.  
            </summary>
            <param name="lemma">
            The lemmas for which the key is desired.
            </param>
            <param name="partOfSpeech">
            The part of speech for which the key is desired.
            </param>
            <param name="senseNumber">
            The sense number for which the key is desired.
            </param>
            <returns> 
            a key indicating the specified sense number of the specified 
            lemma with the specified part-of-speech.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IDictionary.GetSenseCount(System.String,System.String)">
            <summary> 
            Returns the number of senses in the dictionry for the specified lemma.
            </summary>
            <param name="lemma">
            A lemmatized form of the word to look up.
            </param>
            <param name="partOfSpeech">
            The part-of-speech for the lemma.
            </param>
            <returns> the number of senses in the dictionary for the specified lemma.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IDictionary.GetParentSenseKeys(System.String,System.String,System.Int32)">
            <summary>
            Returns an array of keys for each parent of the specified sense number of the specified 
            lemma with the specified part-of-speech.
            </summary>
            <param name="lemma">
            A lemmatized form of the word to look up.
            </param>
            <param name="partOfSpeech">
            The part-of-sppech for the lemma.
            </param>
            <param name="senseNumber">
            The sense number for which the parent keys are desired.
            </param>
            <returns>
            an array of keys for each parent of the specified sense number of the specified lemma 
            with the specified part-of-speech.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.DictionaryFactory">
            <summary>
            Factory class used to get an instance of a dictionary object.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.DictionaryFactory.GetDictionary(System.String)">
            <summary>
            Returns the default implementation of the Dictionary interface.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.IHeadFinder">
            <summary>
            Interface for finding head words in noun phrases and head noun-phrases in parses.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IHeadFinder.GetHead(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns the child parse which contains the lexical head of the specifie parse.
            </summary>
            <param name="parse">
            The parse in which to find the head.
            </param>
            <returns>
            The parse containing the lexical head of the specified parse.  If no head is
            available or the constituent has no sub-components that are eligible heads then null is returned.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IHeadFinder.GetHeadIndex(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns which index the specified list of token is the head word.
            </summary>
            <param name="parse">
            The parse in which to find the head index.
            </param>
            <returns>
            The index of the head token.  
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IHeadFinder.GetLastHead(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns the parse bottom-most head of a <code>IParse</code>.  If no
            head is available which is a child of <code>parse</code> then
            <code>parse</code> is returned. 
            </summary>
            <param name="parse">
            Parse to find the head of.
            </param>
            <returns>
            bottom-most head of parse.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.IHeadFinder.GetHeadToken(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns head token for the specified nounPhrase parse.
            </summary>
            <param name="nounPhrase">The noun parse to get head from.
            </param>
            <returns> head token parse.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.Mention">
            <summary>
            Data structure representation of a mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mSpan">
            <summary>
            Represents the character offset for this extent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mType">
            <summary>
            A string representing the type of this extent.  This is helpful for determining
            which piece of code created a particular extent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mId">
            <summary>
            The entity id indicating which entity this extent belongs to.  This is only
            used when training a coreference classifier.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mHeadSpan">
            <summary>
            Represents the character offsets of the the head of this extent. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mParse">
            <summary>
            The parse node that this extent is based on. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.Mention.mNameType">
            <summary>
            A string representing the name type for this extent. 
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.Mention.Span">
            <summary>
            Returns the character offsets for this extent.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.Mention.HeadSpan">
            <summary>
            Returns the character offsets for the head of this extent.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.Mention.Parse">
            <summary>
            The parse node that this extent is based on or null if the extent is newly created.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.Mention.Id">
            <summary>
            Returns the id associated with this mention.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.Mention.NameType">
            <summary>
            The named-entity category associated with this mention.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.MentionContext">
            <summary>
            Data structure representation of a mention with additional contextual information.  The contextual
            information is used in performing coreference resolution.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.Context">
            <summary>
            Specifies the context of a mention for computing gender, number, and semantic compatibility.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Similarity.Context.HeadTokenIndex">
            <summary>
            The token index in the head word of this mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNonDescriptorStart">
            <summary>
            The index of first token which is not part of a descriptor.  This is 0 if no descriptor is present. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mHead">
            <summary>
            The Parse of the head constituent of this mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mIndexSpan">
            <summary>
            Sentence-token-based span whose end is the last token of the mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNounLocation">
            <summary>
            Position of the NP in the sentence. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNounNumber">
            <summary>
            Position of the NP in the document. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mMaxNounLocation">
            <summary>
            Number of noun phrases in the sentence which contains this mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mSentenceNumber">
            <summary>
            Index of the sentence in the document which contains this mention.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mPreviousToken">
            <summary>
            The token preceeding this mention's maximal noun phrase.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNextToken">
            <summary>
            The token following this mention's maximal noun phrase.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mBasalNextToken">
            <summary>
            The token following this mention's basal noun phrase.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mHeadToken">
            <summary>
            The parse of the mention's head word. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mFirstToken">
            <summary>
            The parse of the first word in the mention. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mFirstTokenText">
            <summary>
            The text of the first word in the mention. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mFirstTokenTag">
            <summary>
            The pos-tag of the first word in the mention. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mGender">
            <summary>
            The gender assigned to this mention. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mGenderProbability">
            <summary>
            The probability associated with the gender assignment.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNumber">
            <summary>
            The number assigned to this mention. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Mention.MentionContext.mNumberProbability">
            <summary>
            The probability associated with the number assignment. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.#ctor(OpenNLP.Tools.Coreference.Mention.Mention,System.Int32,System.Int32,System.Int32,System.Int32,OpenNLP.Tools.Coreference.Mention.IHeadFinder)">
            <summary> 
            Constructs context information for the specified mention.
            </summary>
            <param name="mention">
            The mention object on which this object is based.
            </param>
            <param name="mentionIndexInSentence">
            The mention's position in the sentence.
            </param>
            <param name="mentionsInSentence">
            The number of mentions in the sentence.
            </param>
            <param name="mentionIndexInDocument">
            The index of this mention with respect to the document.
            </param>
            <param name="sentenceIndex">
            The index of the sentence which contains this mention.
            </param>
            <param name="headFinder">
            An object which provides head information.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.InitializeHeads(System.Int32)">
            <summary>
            Constructs context information for the specified mention.
            </summary>
            <param name="mentionParse">
            Mention parse structure for which context is to be constructed.
            </param>
            <param name="mentionIndex">
            mention position in sentence.
            </param>
            <param name="mentionsInSentence">
            Number of mentions in the sentence.
            </param>
            <param name="mentionsInDocument">
            Number of mentions in the document.
            </param>
            <param name="sentenceIndex">
            Sentence number for this mention.
            </param>
            <param name="nameType">
            The named-entity type for this mention.
            </param>
            <param name="headFinder">
            Object which provides head information.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.ToText">
            <summary> 
            Returns the text of this mention. 
            </summary>
            <returns>
            A space-delimited string of the tokens of this mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.SetGender(OpenNLP.Tools.Coreference.Similarity.GenderEnum,System.Double)">
            <summary>
            Assigns the specified gender with the specified probability to this mention.
            </summary>
            <param name="gender">
            The gender to be given to this mention.
            </param>
            <param name="probability">
            The probability assosicated with the gender assignment.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.GetGender">
            <summary>
            Returns the gender of this mention.</summary>
            <returns> 
            The gender of this mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.SetNumber(OpenNLP.Tools.Coreference.Similarity.NumberEnum,System.Double)">
            <summary> 
            Assigns the specified number with the specified probability to this mention.
            </summary>
            <param name="number">
            The number to be given to this mention.
            </param>
            <param name="probability">
            The probability assosicated with the number assignment.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.MentionContext.GetNumber">
            <summary> Returns the number of this mention.</summary>
            <returns> The number of this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.HeadTokenParse">
            <summary>
            Returns the parse of the head token for this mention.
            </summary>
            <returns> 
            the parse of the head token for this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.IndexSpan">
            <summary>
            Returns a sentence-based token span for this mention.  If this mention consist
            of the third, fourth, and fifth token, then this span will be 2..4.   
            </summary>
            <returns>
            a sentence-based token span for this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.NounPhraseSentenceIndex">
            <summary>
            Returns the index of the noun phrase for this mention in a sentence.
            </summary>
            <returns> 
            the index of the noun phrase for this mention in a sentence.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.NounPhraseDocumentIndex">
            <summary> 
            Returns the index of the noun phrase for this mention in a document.
            </summary>
            <returns> 
            the index of the noun phrase for this mention in a document.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.MaxNounPhraseSentenceIndex">
            <summary> 
            Returns the index of the last noun phrase in the sentence containing this mention.
            This is one less than the number of noun phrases in the sentence which contains this mention. 
            </summary>
            <returns> 
            the index of the last noun phrase in the sentence containing this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.SentenceNumber">
            <summary>
            Returns the index of the sentence which contains this mention.
            </summary>
            <returns>
            the index of the sentence which contains this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.FirstToken">
            <summary>
            Returns the parse for the first token in this mention.
            </summary>
            <returns> 
            The parse for the first token in this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.FirstTokenText">
            <summary>
            Returns the text for the first token of the mention.
            </summary>
            <returns> 
            The text for the first token of the mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.FirstTokenTag">
            <summary> 
            Returns the pos-tag of the first token of this mention. 
            </summary>
            <returns>
            the pos-tag of the first token of this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.TokenParses">
            <summary>
            Returns the parses for the tokens which are contained in this mention.
            </summary>
            <returns> 
            An array of parses, in order, for each token contained in this mention.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.GenderProbability">
            <summary>
            Returns the probability associated with the gender assignment.
            </summary>
            <returns> 
            The probability associated with the gender assignment.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.MentionContext.NumberProbability">
            <summary>
            Returns the probability associated with the number assignment.
            </summary>
            <returns>
            The probability associated with the number assignment.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.PennTreebankHeadFinder">
            <summary>
            Finds head information from Penn Treebank style parses.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.PennTreebankHeadFinder.GetLastHead(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns the bottom-most head of a <code>IParse</code>.  If no
            head is available which is a child of <code>parse</code> then
            <code>parse</code> is returned. 
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Mention.PennTreebankHeadFinder.Instance">
            <summary>
            Returns an instance of this head finder.
            </summary>
            <returns>
            An instance of this head finder.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.PennTreebankMentionFinder">
            <summary>
            Finds mentions from Penn Treebank style parses.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Mention.PennTreebankMentionFinder.#ctor(OpenNLP.Tools.Coreference.Mention.IHeadFinder)">
            <summary>
            Creates a new mention finder with the specified head finder.
            </summary>
            <param name="headFinder">
            The head finder.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.ShallowParseMentionFinder">
            <summary> 
            Finds mentions from shallow np-chunking based parses. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Mention.WordnetDictionary">
            <summary> 
            An implementation of the Dictionary interface using the SharpWordnet library. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.AbstractResolver">
            <summary>
            Default implementation of some methods in the {@link IResolver} interface.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.IResolver">
            <summary>
            Interface for coreference resolvers.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.IResolver.CanResolve(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns true if this resolver is able to resolve the referening experession of the same type
            as the specified mention.
            </summary>
            <param name="mention">
            The mention being considered for resolution. 
            </param>
            <returns>
            true if the resolver handles this type of referring
            expression, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.IResolver.Resolve(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseModel)">
            <summary>
            Resolve this referirng expression to a discourse entity in the discourse model.
            </summary>
            <param name="expression">
            the referring expression. 
            </param>
            <param name="discourseModel">
            the discourse model.
            </param>
            <returns>
            the discourse entity which the resolver beleives this
            referring expression refers to or null if no discourse entity is
            coreferent with the referring expression. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.IResolver.Retain(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseModel)">
            <summary>
            Uses the specified mention and discourse model to train this resolver.
            All mentions sent to this method need to have their id fields set to indicate coreference
            relationships.    
            </summary>
            <param name="mention">
            The mention which is being used for training.
            </param>
            <param name="model">
            the discourse model.
            </param>
            <returns>
            the discourse entity which is referred to by the referring
            expression or null if no discourse entity is referenced.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.IResolver.Train">
            <summary>
            Retrains model on examples for which retain was called.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.mNumberEntitiesBack">
            <summary>
            The number of previous entities that resolver should consider.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.mShowExclusions">
            <summary>
            Debugging variable which specifies whether error output is generated if a class excludes as possibly coreferent mentions which are in-fact coreferent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.mDistances">
            <summary>
            Debugging variable which holds statistics about mention distances durring training.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.mNumberSentencesBack">
            <summary>
            The number of sentences back this resolver should look for a referent.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetNumberEntitiesBack">
            <summary>
            Returns the number of previous entities that resolver should consider.
            </summary>
            <returns>
            the number of previous entities that resolver should consider.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetNumberEntitiesBack(OpenNLP.Tools.Coreference.DiscourseModel)">
            <summary>
            The number of entites that should be considered for resolution with the specified discourse model.
            </summary>
            <param name="discourseModel">
            The discourse model.
            </param>
            <returns>
            number of entites that should be considered for resolution.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetHead(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns the head parse for the specified mention.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <returns>
            the head parse for the specified mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetHeadIndex(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns the index for the head word for the specified mention.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <returns>
            the index for the head word for the specified mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetHeadString(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns the text of the head word for the specified mention.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <returns>
            The text of the head word for the specified mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.IsOutOfRange(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Determines if the specified entity is too far from the specified mention to be resolved to it.  
            Once an entity has been determined to be out of range subsequent entities are not considered.
            </summary>
            <seealso cref="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.IsExcluded(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            </seealso>
            <param name="mention">
            The mention which is being considered.
            </param>
            <param name="entity">
            The entity to which the mention is to be resolved.
            </param>
            <returns>
            true is the entity is in range of the mention, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.IsExcluded(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Excludes entities which you are not compatible with the entity under consideration.  The default 
            implementation excludes entties whose last extent contains the extent under consideration.
            This prevents posessive pronouns from referring to the noun phrases they modify and other 
            undesirable things.
            </summary>
            <param name="mention">
            The mention which is being considered as referential.
            </param>
            <param name="entity">
            The entity to which the mention is to be resolved.
            </param>
            <returns>
            true if the entity should be excluded, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetFeatureString(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns the string of "_" delimited tokens for the specified mention.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <returns>
            the string of "_" delimited tokens for the specified mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.StripNounPhrase(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns a string for the specified mention with punctuation, honorifics, designators, and determiners removed.
            </summary>
            <param name="mention">
            The mention to be stripped.
            </param>
            <returns>
            a normalized string representation of the specified mention.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.GetPronounGender(System.String)">
            <summary>
            Returns a string representing the gender of the specifed pronoun.
            </summary>
            <param name="pronoun">
            An English pronoun. 
            </param>
            <returns>
            the gender of the specifed pronoun.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.NumberSentencesBack">
            <summary>
            The number of sentences back this resolver should look for a referent.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.ShowExclusions">
            <summary>
            Debugging variable which holds statistics about mention distances durring training.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.AbstractResolver.Distances">
            <summary>
            Debugging variable which holds statistics about mention distances durring training.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.CommonNounResolver">
            <summary>
            Resolves coreference between common nouns.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver">
            <summary> 
            Provides common functionality used by classes which implement the {@link IResolver} interface
            and use maximum entropy models to make resolution decisions.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.Same">
            <summary>
            Outcomes when two mentions are coreferent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.Diff">
            <summary>
            Outcome when two mentions are not coreferent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.Default">
            <summary>
            Default feature value.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a maximum-entropy-based resolver which will look the specified number of entities back
            for a referent.
            This constructor is only used for unit testing.
            </summary>
            <param name="numberOfEntitiesBack">
            </param>
            <param name="preferFirstReferent">
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.#ctor(System.String,System.String,OpenNLP.Tools.Coreference.Resolver.ResolverMode,System.Int32,System.Boolean,OpenNLP.Tools.Coreference.Resolver.INonReferentialResolver)">
            <summary>
            Creates a maximum-entropy-based resolver with the specified model name, using the 
            specified mode, which will look the specified number of entities back for a referent and
            prefer the first referent if specified.
            </summary>
            <param name="modelDirectory">
            The name of the directory where the resover models are stored.
            </param>
            <param name="name">
            The name of the file where this model will be read or written.
            </param>
            <param name="mode">
            The mode this resolver is being using in (training, testing).
            </param>
            <param name="numberOfEntitiesBack">
            The number of entities back in the text that this resolver will look
            for a referent.
            </param>
            <param name="preferFirstReferent">
            Set to true if the resolver should prefer the first referent which is more
            likly than non-reference.  This only affects testing.
            </param>
            <param name="nonReferentialResolver">
            Determines how likly it is that this entity is non-referential.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.#ctor(System.String,System.String,OpenNLP.Tools.Coreference.Resolver.ResolverMode,System.Int32)">
            <summary>
            Creates a maximum-entropy-based resolver with the specified model name, using the 
            specified mode, which will look the specified number of entities back for a referent.
            </summary>
            <param name="modelDirectory">
            The name of the directory where the resolver models are stored.
            </param>
            <param name="modelName">
            The name of the file where this model will be read or written.
            </param>
            <param name="mode">
            The mode this resolver is being using in (training, testing).
            </param>
            <param name="numberEntitiesBack">
            The number of entities back in the text that this resolver will look
            for a referent.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.defaultReferent(OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns whether the specified entity satisfies the criteria for being a default referent.
            This criteria is used to perform sample selection on the training data and to select a single
            non-referent entity. Typically the criteria is a hueristic for a likely referent.
            </summary>
            <param name="discourseEntity">
            The discourse entity being considered for non-reference.
            </param>
            <returns>
            True if the entity should be used as a default referent, false otherwise. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns a list of features for deciding whether the specified mention refers to the specified discourse entity.
            </summary>
            <param name="mention">
            the mention being considers as possibly referential. 
            </param>
            <param name="entity">
            The discourse entity with which the mention is being considered referential.  
            </param>
            <returns>
            a list of features used to predict reference between the specified mention and entity.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetCompatibilityFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns features indicating whether the specified mention and the specified entity are compatible.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <param name="entity">
            The entity.
            </param>
            <returns> 
            list of features indicating whether the specified mention and the specified entity are compatible.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetContextFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns a list of features based on the surrounding context of the specified mention.
            </summary>
            <param name="mention">
            the mention whose surround context the features model. 
            </param>
            <returns>
            a list of features based on the surrounding context of the specified mention
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.IsDefiniteArticle(System.String,System.String)">
            <summary>
            Returns whether the specified token is a definite article.</summary>
            <param name="token">
            The token.
            </param>
            <param name="tag">
            The pos-tag for the specified token.
            </param>
            <returns> 
            whether the specified token is a definite article.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetDistanceFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns distance features for the specified mention and entity.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <param name="entity">
            The entity.
            </param>
            <returns>
            list of distance features for the specified mention and entity.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetPronounMatchFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns features indicating whether the specified mention is compatible with the pronouns
            of the specified entity.
            </summary>
            <param name="mention">
            The mention.
            </param>
            <param name="entity">
            The entity.
            </param>
            <returns> 
            list of features indicating whether the specified mention is compatible with the pronouns
            of the specified entity.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetStringMatchFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext,OpenNLP.Tools.Coreference.DiscourseEntity)">
            <summary>
            Returns string-match features for the the specified mention and entity.</summary>
            <param name="mention">
            The mention.
            </param>
            <param name="entity">
            The entity.
            </param>
            <returns>
            list of string-match features for the the specified mention and entity.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.GetWordFeatures(OpenNLP.Tools.Coreference.Mention.IParse)">
            <summary>
            Returns a list of word features for the specified tokens.
            </summary>
            <param name="token">
            The token for which features are to be computed.
            </param>
            <returns>
            a list of word features for the specified tokens.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.PreferFirstReferent">
            <summary>
            When true, this designates that the resolver should use the first referent encountered which it
            more preferable than non-reference.  When false, all non-excluded referents within this resolver's range
            are considered. 
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.PairedSampleSelection">
            <summary>
            When true, this designates that training should consist of a single positive and a single negative example
            (when possible) for each mention. 
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.UseSameModelForNonRef">
            <summary>
            When true, this designates that the same maximum entropy model should be used non-reference
            events (the pairing of a mention and the "null" reference) as is used for potentially 
            referential pairs.  When false a seperate model is created for these events.  
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Coreference.Resolver.MaximumEntropyResolver.NonReferentialResolver">
            <summary>
            The model for computing non-referential probabilities.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.DefaultNonReferentialResolver">
            <summary> 
            Default implementation of the {@link INonReferentialResolver} interface.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.INonReferentialResolver">
            <summary>
            Provides the interface for a object to provide a resolver with a non-referential
            probability.  Non-referential resolvers compute the probability that a particular mention refers
            to no antecedent.  This probability can then compete with the probability that
            a mention refers with a specific antecedent. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.INonReferentialResolver.GetNonReferentialProbability(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns the probability that the specified mention doesn't refer to any previous mention.
            </summary>
            <param name="mention">
            The mention under consideration.
            </param>
            <returns>
            A probability that the specified mention doesn't refer to any previous mention. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.INonReferentialResolver.AddEvent(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Designates that the specified mention be used for training.
            </summary>
            <param name="mention">
            The mention to be used.  The mention id is used to determine
            whether this mention is referential or non-referential.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.INonReferentialResolver.Train">
            <summary>
            Trains a model based on the events given to this resolver via AddEvent.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Resolver.DefaultNonReferentialResolver.GetNonReferentialFeatures(OpenNLP.Tools.Coreference.Mention.MentionContext)">
            <summary>
            Returns a list of features used to predict whether the specified mention is non-referential.
            </summary>
            <param name="mention">
            The mention under considereation.
            </param>
            <returns> 
            a list of featues used to predict whether the specified mention is non-referential.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.DefiniteNounResolver">
            <summary> Resolves coreference between definite noun-phrases. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.FixedNonReferentialResolver">
            <summary> Implementation of non-referential classifier which uses a fixed-value threshold. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.IsAResolver">
            <summary>  Resolves coreference between appositives. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.PerfectResolver">
            <summary> Resolver used in training to update the discourse model based on the coreference annotation.  </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.PluralNounResolver">
            <summary> Resolves coreference between plural nouns. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.PluralPronounResolver">
            <summary> Resolves coreference between plural pronouns and their referents.</summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.ProperNounResolver">
            <summary> Resolves coreference between proper nouns.</summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.ResolverMode">
            <summary> Enumerated type specifying the modes if a resolver. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.SingletonNonReferentialResolver">
            <summary>
            This class allows you to share a single instance of a non-referential resolver
            amoung several resolvers.   
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.SingularPronounResolver">
            <summary> This class resolver singlular pronouns such as "he", "she", "it" and their various forms. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Resolver.SpeechPronounResolver">
            <summary> Resolves pronouns specific to quoted speech such as "you", "me", and "I".  </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.GenderEnum">
            <summary>
            Enumeration of gender types.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.GenderEnum.Male">
            <summary>
            Male gender.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.GenderEnum.Female">
            <summary>
            Female gender.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.GenderEnum.Neuter">
            <summary>
            Neuter gender.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.GenderEnum.Unknown">
            <summary>
            Unknown gender.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.GenderModel">
            <summary>
            Class which models the gender of a particular mentions and entities made up of mentions.
            </summary>
            <author> 
            Tom Morton
            </author>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.ITestGenderModel">
            <summary> Interface for testing a gender model. </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.ITrainSimilarityModel">
            <summary> 
            Interface for training a similarity, gender, or number model. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.ITrainSimilarityModel.SetExtents(OpenNLP.Tools.Coreference.Similarity.Context[])">
            <summary>
            Creates similarity training pairs based on the specified extents.
            Extents are considered compatible if they are in the same coreference chain,
            have the same named-entity tag, or share a common head word.  Incompatible extents are chosen at random 
            from the set of extents which don't meet this criteria.
            </summary>
            <param name="extents">
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.GenderModel.GetGender(OpenNLP.Tools.Coreference.Similarity.Context)">
            <summary>
            Heuristic computation of gender for a mention context using pronouns and honorifics.
            </summary>
            <param name="mention">
            The mention whose gender is to be computed.
            </param>
            <returns>
            The heuristically determined gender or unknown.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.NumberEnum">
            <summary> Enumeration of number types. </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.NumberEnum.Singular">
            <summary>
            Singular number type. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.NumberEnum.Plural">
            <summary>
            Plural number type.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.NumberEnum.Unknown">
            <summary>
            Unknown number type. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.NumberModel">
            <summary> 
            Class which models the number of particular mentions and the entities made up of mentions. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.ITestNumberModel">
            <summary> 
            Interface for testing a number model.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.SemanticEnum.Compatible">
            <summary>
            Semantically compatible. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.SemanticEnum.Incompatible">
            <summary>
            Semantically incompatible.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Coreference.Similarity.SemanticEnum.Unknown">
            <summary>
            Semantic compatibility Unknown. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.SimilarityModel">
            <summary>
            Models semantic similarity between two mentions and returns a score based on 
            how semantically comparible the mentions are with one another.  
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Coreference.Similarity.ITestSimilarityModel">
            <summary>
            Interface for testing a similarity model.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.ConstructHeadSet(System.Collections.Generic.List{OpenNLP.Tools.Coreference.Similarity.Context})">
            <summary> 
            Produces a set of head words for the specified list of mentions.
            </summary>
            <param name="mentions">
            The mentions to use to construct the 
            </param>
            <returns> 
            A set containing the head words of the sepecified mentions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.ConstructExclusionSet(System.Int32,OpenNLP.Tools.Util.HashList{System.Int32,OpenNLP.Tools.Coreference.Similarity.Context},System.Collections.Generic.Dictionary{System.Int32,OpenNLP.Tools.Util.Set{System.String}},System.Collections.Generic.Dictionary{System.Int32,OpenNLP.Tools.Util.Set{System.String}},System.Collections.Generic.List{OpenNLP.Tools.Coreference.Similarity.Context})">
            <summary>
            Constructs a set of entities which may be semantically compatible with the entity indicated by
            the specified entityKey.
            </summary>
            <param name="entityKey">
            The key of the entity for which the set is being constructed. 
            </param>
            <param name="entities">
            A mapping between entity keys and their mentions. 
            </param>
            <param name="headSets">
            A mapping between entity keys and their head sets.
            </param>
            <param name="nameSets">
            A mapping between entity keys and their name sets.
            </param>
            <param name="singletons">
            A list of all entities which consists of a single mention.
            </param>
            <returns>
            A set of mentions for all the entities which might be semantically compatible 
            with entity indicated by the specified key. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.ConstructHeadSets(OpenNLP.Tools.Util.HashList{System.Int32,OpenNLP.Tools.Coreference.Similarity.Context})">
            <summary>
            Constructs a mapping between the specified entities and their head set.
            </summary>
            <param name="entities">
            Mapping between a key and a list of mentions which compose an entity.
            </param>
            <returns> 
            a mapping between the keys of the secified entity mapping and the head set 
            generatated from the mentions associated with that key.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.ConstructNameSet(System.Collections.Generic.List{OpenNLP.Tools.Coreference.Similarity.Context})">
            <summary> 
            Produces the set of name types associated with each of the specified mentions.
            </summary>
            <param name="mentions">
            A list of mentions.
            </param>
            <returns>
            A set of name types assigned to the specified mentions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.ConstructNameSets(OpenNLP.Tools.Util.HashList{System.Int32,OpenNLP.Tools.Coreference.Similarity.Context})">
            <summary> 
            Constructs a mappng between the specified entities and the names associated with these entities.
            </summary>
            <param name="entities">
            A mapping between a key and a list of mentions.
            </param>
            <returns>
            a mapping between each key in the specified entity map and the name types associated with the each mention of that entity.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.AreCompatible(OpenNLP.Tools.Coreference.Similarity.Context,OpenNLP.Tools.Coreference.Similarity.Context)">
            <summary> 
            Returns a number between 0 and 1 which represents the models belief that the specified mentions are
            compatible.
            Value closer to 1 are more compatible, while values closer to 0 are less compatible.
            </summary>
            <param name="firstMention">
            The first mention to be considered.
            </param>
            <param name="secondMention">
            The second mention to be considered.
            </param>
            <returns> 
            a number between 0 and 1 which represents the models belief that the specified mentions are compatible.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Coreference.Similarity.SimilarityModel.TrainModel">
            <summary> 
            Train a model based on the previously supplied evidence.
            </summary>
            <seealso cref="!:setExtents(Context[])">
            </seealso>
        </member>
        <member name="T:OpenNLP.Tools.Lang.English.TreebankLinker">
            <summary>
            This class perform coreference for treebank style parses.  
            It will only perform coreference over constituents defined in the trees and
            will not generate new constituents for pre-nominal entities or sub-entities in 
            simple coordinated noun phrases.  This linker requires that named-entity information also be provided.  
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Lang.English.TreebankLinker.GetCoreferenceParse(System.String[])">
            <summary>
            Identitifies coreference relationships for parsed input.
            </summary>
            <param name="parsedSentences">Array of parsed sentences.</param>
            <returns></returns>
        </member>
        <member name="M:OpenNLP.Tools.Lang.English.TreebankLinker.GetCoreferenceParse(OpenNLP.Tools.Parser.Parse[])">
            <summary>
            Identitifies coreference relationships for parsed input.
            </summary>
            <param name="parsedSentences">Array of parsed sentences.</param>
            <returns></returns>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.DefaultNameContextGenerator">
            <summary>
            Class for determining contextual features for a tag/chunk style named-entity recognizer.
            </summary>
            
        </member>
        <member name="T:OpenNLP.Tools.NameFind.INameContextGenerator">
            <summary>
            Context generator for the name find tool.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.INameContextGenerator.GetContext(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="tokenIndex">
            The index of the token in the specified tokens array for which the context should be constructed. 
            </param>
            <param name="tokens">
            The tokens of the sentence.
            </param>
            <param name="previousDecisions">
            The previous decisions made in the tagging of this sequence.  Only indices less than tokenIndex will be examined.
            </param>
            <param name="previousTags">
            A mapping between tokens and the previous outcome for these tokens. 
            </param>
            <returns>
            An array of predictive contexts on which a model basis its decisions.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.DefaultNameContextGenerator.#ctor">
            <summary>
            Creates a name context generator.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.DefaultNameContextGenerator.#ctor(System.Int32)">
            <summary>
            Creates a name context generator with the specified cache size.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.DefaultNameContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Return the context for finding names at the specified index.
            </summary>
            <param name="index">
            The index of the token in the specified tokens array for which the context should be constructed. 
            </param>
            <param name="tokens">
            tokens of the sentence.
            </param>
            <param name="predicates">
            The previous decisions made in the tagging of this sequence.  Only indices less than {index} will be examined.
            </param>
            <param name="previousTags">
            A mapping between tokens and the previous outcome for these tokens. 
            </param>
            <returns>
            the context for finding names at the specified index.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.DefaultNameContextGenerator.GetStaticFeatures(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a list of the features for <code>tokens[index]</code> that can
            be safely cached.  In other words, return a list of all
            features that do not depend on previous outcome or decision
            features.  This method is called by <code>search</code>.
            </summary>
            <param name="tokens">
            The list of tokens being processed.
            </param>
            <param name="index">
            The index of the token whose features should be
            returned.
            </param>
            <param name="previousTags">
            The list of previous tags.
            </param>
            <returns> a list of the features for <code>tokens[index]</code> that can
            be safely cached.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.DefaultNameContextGenerator.WordFeature(System.String)">
            <summary>
            Return the most relevant feature for a given word.  This method
            is used to get the features for words
            within a window of the word being analyzed.  Typical features
            are "2d" (2 digits); "4d" (4 digits); and "ac" (all caps).
            Note that only a single feature is returned.  The default
            feature is "other".
            </summary>
            <param name="word">
            The word whose features should be returned.
            </param>
            <returns>
            A feature code.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.EnglishNameFinder">
            <summary> Class is used to create a name finder for English.</summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.EnglishNameFinder.ProcessText(System.String[],System.String)">
            <summary>
            Adds sgml style name tags to the specified input string and outputs this information.
            </summary>
            <param name="models">
            The model names for the name finders to be used.
            </param>
            <param name="input">
            The input.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.INameFinder">
            <summary>
            The interface for name finders which provide name tags for a sequence of tokens.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.INameFinder.Find(System.Collections.ArrayList,System.Collections.IDictionary)">
            <summary>
            Generates name tags for the given sequence returning the result in a list.
            </summary>
            <param name="tokens">
            a list of the tokens or words of the sequence.
            </param>
            <param name="previousTags">
            a mapping between tokens and outcomes from previous sentences. 
            </param>
            <returns>
            a list of chunk tags for each token in the sequence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.INameFinder.Find(System.Object[],System.Collections.IDictionary)">
            <summary>
            Generates name tags for the given sequence returning the result in an array.
            </summary>
            <param name="tokens">
            an array of the tokens or words of the sequence.
            </param>
            <param name="previousTags">
            a mapping between tokens and outcomes from previous sentences. 
            </param>
            <returns>
            an array of chunk tags for each token in the sequence.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder">
            <summary>
            Class for creating a maximum-entropy-based name finder.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.#ctor(SharpEntropy.IMaximumEntropyModel)">
            <summary>
            Creates a new name finder with the specified model.
            </summary>
            <param name="model">
            The model to be used to find names.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.#ctor(SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.NameFind.INameContextGenerator)">
            <summary>
            Creates a new name finder with the specified model and context generator.
            </summary>
            <param name="model">
            The model to be used to find names.
            </param>
            <param name="contextGenerator">
            The context generator to be used with this name finder.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.#ctor(SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.NameFind.INameContextGenerator,System.Int32)">
            <summary>
            Creates a new name finder with the specified model and context generator.
            </summary>
            <param name="model">
            The model to be used to find names.
            </param>
            <param name="contextGenerator">
            The context generator to be used with this name finder.
            </param>
            <param name="beamSize">
            The size of the beam to be used in decoding this model.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.ValidOutcome(System.String,OpenNLP.Tools.Util.Sequence)">
            <summary>
            This method determines wheter the outcome is valid for the preceding sequence.  
            This can be used to implement constraints on what sequences are valid.  
            </summary>
            <param name="outcome">
            The outcome.
            </param>
            <param name="sequence">
            The preceding sequence of outcome assignments. 
            </param>
            <returns>
            true is the outcome is valid for the sequence, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.GetProbabilities(System.Double[])">
            <summary>
            Populates the specified array with the probabilities of the last decoded sequence.  The
            sequence was determined based on the previous call to <code>chunk</code>.  The 
            specified array should be at least as large as the numbe of tokens in the previous call to <code>chunk</code>.
            </summary>
            <param name="probabilities">
            An array used to hold the probabilities of the last decoded sequence.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.GetProbabilities">
            <summary>
            Returns an array with the probabilities of the last decoded sequence.  The
            sequence was determined based on the previous call to <code>chunk</code>.
            </summary>
            <returns>
            An array with the same number of probabilities as tokens were sent to <code>chunk</code>
            when it was last called.   
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.NameBeamSearch">
            <summary>
            Implementation of the abstract beam search to allow the name finder to use the common beam search code. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.MaximumEntropyNameFinder.NameBeamSearch.#ctor(OpenNLP.Tools.NameFind.MaximumEntropyNameFinder,System.Int32,OpenNLP.Tools.NameFind.INameContextGenerator,SharpEntropy.IMaximumEntropyModel,System.Int32)">
            <summary>
            Creates a beam seach of the specified size using the specified model with the specified context generator.
            </summary>
            <param name="nameFinder">
            The associated MaximumEntropyNameFinder instance.
            </param>
            <param name="size">
            The size of the beam.
            </param>
            <param name="contextGenerator">
            The context generator used with the specified model.
            </param>
            <param name="model">
            The model used to determine names.
            </param>
            <param name="beamSize">
            The size of the beam to use in searching.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.NameFind.NameFinderEventReader">
            <summary>
            Class for creating a training event reader out of data files for training a name finder.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.NameFind.NameFinderEventReader.mPreviousTags">
            <summary>
            A mapping between tokens and the name tag assigned to them previously. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.NameFind.NameFinderEventReader.mEventIndex">
            <summary>
            The index into the array of events.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.NameFind.NameFinderEventReader.mLine">
            <summary>
            The last line read in from the data file.
            </summary>	
        </member>
        <member name="M:OpenNLP.Tools.NameFind.NameFinderEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String})">
            <summary>
            Creates a new event reader based on the specified data reader.
            </summary>
            <param name="dataReader">
            The data stream for this event reader.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.NameFinderEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String},OpenNLP.Tools.NameFind.INameContextGenerator)">
            <summary>
            Creates a new event reader based on the specified data reader using the specified context generator.
            </summary>
            <param name="dataReader">
            The data reader for this event reader.
            </param>
            <param name="contextGenerator">
            The context generator which should be used in the creation of events for this event stream.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.NameFind.NameFinderEventReader.AddEvents(System.String)">
            <summary>
            Adds name events for the specified sentence.
            </summary>
            <param name="sentence">
            The sentence for which name events should be added.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Parser.BuildContextGenerator">
            <summary>
            Class to generator predictive contexts for deciding how constituents should be combined together.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.BuildContextGenerator.#ctor">
            <summary> 
            Creates a new context generator for making decisions about combining constituents together.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.BuildContextGenerator.GetContext(System.Object)">
            <summary>
            Returns the predictive context used to determine how the constituent at the specified index 
            should be combined with other constituents. 
            </summary>
            <param name="input">
            Object array containing an array of Parse objects (the uncombined constituents), and the index of the
            relevant constituent.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.BuildContextGenerator.GetContext(OpenNLP.Tools.Parser.Parse[],System.Int32)">
            <summary>
            Returns the predictive context used to determine how the constituent at the specified index 
            should be combined with other constituents. 
            </summary>
            <param name="constituents">
            The constituents which have yet to be combined into new constituents.
            </param>
            <param name="index">
            The index of the constituent whcihi is being considered.
            </param>
            <returns>
            the context for building constituents at the specified index.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.CheckContextGenerator">
            <summary>
            Class for generating predictive context for deciding when a constituent is complete.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.CheckContextGenerator.#ctor">
            <summary>
            Creates a new context generator for generating predictive context for deciding when a constituent is complete.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.CheckContextGenerator.GetContext(OpenNLP.Tools.Parser.Parse[],System.String,System.Int32,System.Int32)">
            <summary>
            Returns predictive context for deciding whether the specified constituents between the specified start and end index 
            can be combined to form a new constituent of the specified type.  
            </summary>
            <param name="constituents">
            The constituents which have yet to be combined into new constituents.
            </param>
            <param name="type">
            The type of the new constituent proposed.
            </param>
            <param name="firstConstituent">
            The first constituent of the proposed constituent.
            </param>
            <param name="lastConstituent">
            The last constituent of the proposed constituent.
            </param>
            <returns>
            The predictive context for deciding whether a new constituent should be created.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.ChunkContextGenerator">
            <summary>
            Creates predictive context for the pre-chunking phases of parsing.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.ChunkContextGenerator.GetContext(System.Int32,System.Object[],System.String[],System.String[])">
            <summary>
            Returns the contexts for chunking of the specified index.
            </summary>
            <param name="index">
            The index of the token in the specified tokens array for which the context should be constructed. 
            </param>
            <param name="words">
            The tokens of the sentence.  The <code>ToString()</code> methods of these objects should return the token text.
            </param>
            <param name="predicates">
            The previous decisions made in the tagging of this sequence.  Only indices less than i will be examined.
            </param>
            <param name="tags">
            The POS tags for the the specified tokens.
            </param>
            <returns>
            An array of predictive contexts on which a model basis its decisions.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.EnglishHeadRules">
            <summary> 
            Class for storing the English head rules associated with parsing. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Parser.IHeadRules">
            <summary>
            Interface for encoding the head rules associated with parsing.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.IHeadRules.GetHead(OpenNLP.Tools.Parser.Parse[],System.String)">
            <summary>
            Returns the head constituent for the specified constituents of the specified type.
            </summary>
            <param name="constituents">
            The constituents which make up a constituent of the specified type.
            </param>
            <param name="type">
            The type of a constituent which is made up of the specifed constituents.
            </param>
            <returns>
            The constituent which is the head.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.EnglishTreebankParser">
            <summary>
            Class that wraps the MaximumEntropyParser to make it easy to perform full parses using the English Treebank
            based maximum entropy models.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger">
            <summary>
            A part-of-speech tagger that uses maximum entropy.  Trys to predict whether
            words are nouns, verbs, or any of 70 other POS tags depending on their
            surrounding context.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.IPosTagger">
            <summary> 
            The interface for part of speech taggers.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.IPosTagger.Tag(System.Collections.ArrayList)">
            <summary>
            Assigns the sentence of tokens pos tags.
            </summary>
            <param name="tokens">
            The sentence of tokens to be tagged.
            </param>
            <returns>
            a list of pos tags for each token provided in sentence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.IPosTagger.Tag(System.String[])">
            <summary>
            Assigns the sentence of tokens pos tags.</summary>
            <param name="tokens">
            The sentence of tokens to be tagged.
            </param>
            <returns>
            an array of pos tags for each token provided in sentence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.IPosTagger.TagSentence(System.String)">
            <summary>
            Assigns pos tags to the sentence of space-delimited tokens.
            </summary>
            <param name="sentence">
            The sentence of space-delimited tokens to be tagged.
            </param>
            <returns>
            a string of space-delimited pos tags for each token provided in sentence.
            </returns>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.mPosModel">
            <summary>
            The maximum entropy model to use to evaluate contexts.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.mContextGenerator">
            <summary>
            The feature context generator.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.mDictionary">
             <summary>
            Tag dictionary used for restricting words to a fixed set of tags.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.mUseClosedClassTagsFilter">
            <summary>
            Says whether a filter should be used to check whether a tag assignment
            is to a word outside of a closed class.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.mBeamSize">
            <summary>
            The size of the beam to be used in determining the best sequence of pos tags.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.AllTags">
            <summary>
            Returns a list of all the possible POS tags predicted by this model.
            </summary>
            <returns>
            String array of the possible POS tags.
            </returns>
        </member>
        <member name="F:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.Beam">
            <summary>
            The search object used for search multiple sequences of tags.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.Train(SharpEntropy.ITrainingEventReader,System.Int32,System.Int32)">
            <summary>
            Trains a POS tag maximum entropy model.
            </summary>
            <param name="eventStream">
            Stream of training events
            </param>
            <param name="iterations">
            number of training iterations to perform.
            </param>
            <param name="cut">
            cutoff value to use for the data indexer.
            </param>
            <returns>
            Trained GIS model.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.TrainModel(System.String)">
            <summary>
            Trains a POS tag maximum entropy model.
            </summary>
            <param name="trainingFile">
            filepath to the training data.
            </param>
            <returns>
            Trained GIS model.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.TrainModel(System.String,System.Int32,System.Int32)">
            <summary>
            Trains a POS tag maximum entropy model.
            </summary>
            <param name="trainingFile">
            filepath to the training data.
            </param>
            <param name="iterations">
            number of training iterations to perform.
            </param>
            <param name="cutoff">
            Cutoff value to use for the data indexer.
            </param>
            <returns>
            Trained GIS model.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.NumTags">
            <summary>
            Returns the number of different tags predicted by this model.
            </summary>
            <returns>
            the number of different tags predicted by this model.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.PosTagger.MaximumEntropyPosTagger.UseClosedClassTagsFilter">
            <summary>
            Says whether a filter should be used to check whether a tag assignment
            is to a word outside of a closed class.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Parser.IParserTagger">
            <summary>
            Interface that a pos-tagger used by the parser must implement.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Parser.IParserChunker">
            <summary>
            Interface that a chunker used with the parser should implement.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.IParserChunker.TopKSequences(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags
            </summary>
            <param name="sentence">
            The tokens of the sentence.
            </param>
            <param name="tags">
            The pos-tags for the specified sentence.
            </param>
            <returns>
            the top k chunk sequences for the specified sentence.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.IParserChunker.TopKSequences(System.String[],System.String[],System.Double)">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags
            </summary>
            <param name="sentence">
            The tokens of the sentence.
            </param>
            <param name="tags">
            The pos-tags for the specified sentence.
            </param>
            <param name="minSequenceScore">
            </param>
            <returns>
            the top k chunk sequences for the specified sentence.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.MaximumEntropyParser">
            <summary>
            Class for a shift reduce style parser based on Adwait Ratnaparki's 1998 thesis.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.DefaultBeamSize">
            <summary>
            The default beam size used if no beam size is given.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.DefaultAdvancePercentage">
            <summary>
            The default amount of probability mass required of advanced outcomes.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.StartPrefix">
            <summary>
            Prefix for outcomes starting a constituent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.ContinuePrefix">
            <summary>
            Prefix for outcomes continuing a constituent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.OtherOutcome">
            <summary>
            Outcome for token which is not contained in a basal constituent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.CompleteOutcome">
            <summary>
            Outcome used when a constituent is complete.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.IncompleteOutcome">
            <summary>
            Outcome used when a constituent is incomplete.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.M">
            <summary>
            The maximum number of parses advanced from all preceding parses at each derivation step.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.K">
            <summary>
            The maximum number of parses to advance from a single preceding parse.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.Q">
            <summary>
            The minimum total probability mass of advanced outcomes.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.mParses">
            <summary>
            Completed parses.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.mOldDerivationsHeap">
            <summary>
            Incomplete parses which will be advanced.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.MaximumEntropyParser.mNewDerivationsHeap">
            <summary>
            Incomplete parses which have been advanced.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.#ctor(SharpEntropy.IMaximumEntropyModel,SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.Parser.IParserTagger,OpenNLP.Tools.Parser.IParserChunker,OpenNLP.Tools.Parser.IHeadRules)">
            <summary>
            Creates a new parser using the specified models and head rules.
            </summary>
            <param name="buildModel">
            The model to assign constituent labels.
            </param>
            <param name="checkModel">
            The model to determine a constituent is complete.
            </param>
            <param name="tagger">
            The model to assign pos-tags.
            </param>
            <param name="chunker">
            The model to assign flat constituent labels.
            </param>
            <param name="headRules">
            The head rules for head word perculation.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.#ctor(SharpEntropy.IMaximumEntropyModel,SharpEntropy.IMaximumEntropyModel,OpenNLP.Tools.Parser.IParserTagger,OpenNLP.Tools.Parser.IParserChunker,OpenNLP.Tools.Parser.IHeadRules,System.Int32,System.Double)">
            <summary>
            Creates a new parser using the specified models and head rules using the specified beam size and advance percentage.
            </summary>
            <param name="buildModel">
            The model to assign constituent labels.
            </param>
            <param name="checkModel">
            The model to determine a constituent is complete.
            </param>
            <param name="tagger">
            The model to assign pos-tags.
            </param>
            <param name="chunker">
            The model to assign flat constituent labels.
            </param>
            <param name="headRules">
            The head rules for head word perculation.
            </param>
            <param name="beamSize">
            The number of different parses kept during parsing.
            </param>
            <param name="advancePercentage">
            The minimal amount of probability mass which advanced outcomes must represent.
            Only outcomes which contribute to the top "advancePercentage" will be explored.
            </param>    
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.FullParse(OpenNLP.Tools.Parser.Parse,System.Int32)">
            <summary>
            Returns a parse for the specified parse of tokens.
            </summary>
            <param name="flatParse">
            A flat parse containing only tokens and a root node, p. 
            </param>
            <param name="parseCount">
            the number of parses required
            </param>
            <returns>
            A full parse of the specified tokens or the flat chunks of the tokens if a full parse could not be found.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.AdvanceParses(OpenNLP.Tools.Parser.Parse,System.Double)">
            <summary>
            Advances the specified parse and returns the an array advanced parses whose probability accounts for
            more than the speicficed amount of probability mass, Q.
            </summary>
            <param name="inputParse">
            The parse to advance.
            </param>
            <param name="Q">
            The amount of probability mass that should be accounted for by the advanced parses.
            </param> 
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.AdvanceChunks(OpenNLP.Tools.Parser.Parse,System.Double)">
            <summary>
            Returns the top chunk sequences for the specified parse.
            </summary>
            <param name="inputParse">
            A pos-tag assigned parse.
            </param>
             <param name="minChunkScore">
             the minimum probability for an allowed chunk sequence.
             </param>
            <returns>
            The top chunk assignments to the specified parse.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.MaximumEntropyParser.AdvanceTags(OpenNLP.Tools.Parser.Parse)">
            <summary>
            Advances the parse by assigning it POS tags and returns multiple tag sequences.
            </summary>
            <param name="inputParse">
            The parse to be tagged.
            </param>
            <returns>
            Parses with different pos-tag sequence assignments.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.ParseException">
            <summary>
            Exception class for problems detected during parsing.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Parser.Parse">
            <summary>
            Class for holding constituents.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mText">
            <summary>
            The text string on which this parse is based.  This object is shared among all parses for the same sentence.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mSpan">
            <summary>
            The character offsets into the text for this constituent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mType">
            <summary>
            The syntactic type of this parse.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mParts">
            <summary>
            The sub-constituents of this parse.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mHead">
            <summary>
            The head parse of this parse. A parse can be its own head.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mLabel">
            <summary>
            The outcome assigned to this parse during cconstruction of its parent parse.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mParent">
            <summary>
            The parent parse of this parse. 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mProbability">
            <summary>
            The probability associated with the syntactic type assigned to this parse.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mDerivation">
            <summary>
            The string buffer used to track the derivation of this parse.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.GetChildren">
            <summary>
            The sub-constituents of this parse.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.SetChild(System.Int32,System.String)">
            <summary>
            Replaces the child at the specified index with a new child with the specified label. 
            </summary>
            <param name="index">
            The index of the child to be replaced.
            </param>
            <param name="label">
            The label to be assigned to the new child.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.IndexOf(OpenNLP.Tools.Parser.Parse)">
            <summary>
            Returns the index of this specified child.
            </summary>
            <param name="child">
            A child of this parse.
            </param>
            <returns>
            the index of this specified child or -1 if the specified child is not a child of this parse.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.AddProbability(System.Double)">
            <summary>
            Adds the specified probability log to this current log for this parse.
            </summary>
            <param name="logProbability">
            The probaility of an action performed on this parse.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.GetTagSequenceProbability">
            <summary>
            Returns the probability associated with the pos-tag sequence assigned to this parse.
            </summary>
            <returns>
            The probability associated with the pos-tag sequence assigned to this parse.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.Insert(OpenNLP.Tools.Parser.Parse)">
            <summary>
            Inserts the specified constituent into this parse based on its text span.  This
            method assumes that the specified constituent can be inserted into this parse.
            </summary>
            <param name="constituent">
            The constituent to be inserted.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.Show">
            <summary>
            Displays this parse using Penn Treebank-style formatting.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.UpdateHeads(OpenNLP.Tools.Parser.IHeadRules)">
            <summary>
            Computes the head parses for this parse and its sub-parses and stores this information
            in the parse data structure. 
            </summary>
            <param name="rules">
            The head rules which determine how the head of the parse is computed.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.GetTagNodes">
            <summary>
            Returns the parse nodes which are children of this node and which are pos tags.
            </summary>
            <returns>
            the parse nodes which are children of this node and which are pos tags.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.GetCommonParent(OpenNLP.Tools.Parser.Parse)">
            <summary>
            Returns the deepest shared parent of this node and the specified node. 
            If the nodes are identical then their parent is returned.  
            If one node is the parent of the other then the parent node is returned.
            </summary>
            <param name="node">
            The node from which parents are compared to this node's parents.
            </param>
            <returns>
            the deepest shared parent of this node and the specified node.
            </returns>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mTypePattern">
            <summary>
            The pattern used to find the base constituent label of a Penn Treebank labeled constituent.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Parser.Parse.mTokenPattern">
            <summary>
            The pattern used to identify tokens in Penn Treebank labeled constituents.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.Parse.FromParseString(System.String)">
            <summary>
            Generates a Parse structure from the specified tree-bank style parse string. 
            </summary>
            <param name="parse">
            A tree-bank style parse string.
            </param>
            <returns>
            a Parse structure for the specified tree-bank style parse string.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Parser.Parse.Text">
            <summary>
            Returns the text of the sentence over which this parse was formed.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Parser.Parse.Span">
            <summary>
            Returns the character offsets for this constituent.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Parser.Parse.ChildCount">
            <summary>
            The number of children for this parse node.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Parser.Parse.Probability">
            <summary>
            Returns the log of the product of the probability associated with all the decisions which formed this constituent.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Parser.Parse.IsComplete">
            <summary>Returns whether this parse is complete.</summary>
            <returns>Returns true if the parse contains a single top-most node.</returns>
        </member>
        <member name="T:OpenNLP.Tools.Parser.EventType">
            <summary>
             Enumerated type of event types for the parser. 
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Parser.ParserEventReader">
            <summary>
            Wrapper class for one of four parser event readers.  The particular event stream is specified 
            at construction.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Parser.ParserEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String},OpenNLP.Tools.Parser.IHeadRules,OpenNLP.Tools.Parser.EventType)">
            <summary>
            Create an event reader based on the specified data reader of the specified type using the specified head rules.
            </summary>
            <param name="dataReader">
            A 1-parse-per-line Penn Treebank Style parse. 
            </param>
            <param name="rules">
            The head rules.
            </param>
            <param name="eventType">
            The type of events desired (tag, chunk, build, or check).
            </param>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.DefaultPosContextGenerator">
            <summary> 
            A context generator for the POS Tagger.
            </summary>	
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.IPosContextGenerator">
            <summary> 
            The interface for a context generator for the POS Tagger.
            </summary>	
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.DefaultPosContextGenerator.GetContext(System.Int32,System.Object[],System.String[])">
            <summary>
            Returns the context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </summary>
            <param name="index">
            The index of the token for which the context is provided.
            </param>
            <param name="tokens">
            The tokens in the sentence.
            </param>
            <param name="tags">
            The tags assigned to the previous words in the sentence.
            </param>
            <returns>
            The context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.EnglishMaximumEntropyPosTagger">
            <summary>
            A part of speech tagger that uses a model trained on English data from the
            Wall Street Journal and the Brown corpus.  The latest model created
            achieved >96% accuracy on unseen data.
            </summary>	
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.PosEventReader">
            <summary> 
            An event generator for the maxent POS Tagger.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.PosLookupList">
            <summary>
            Provides a means of determining which tags are valid for a particular word based on a tag dictionary read from a file.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupList.#ctor(System.String,System.Boolean)">
            <summary>
            Create tag dictionary object with contents of specified file and using specified case to determine how to access entries in the tag dictionary.
            </summary>
            <param name="file">
            The file name for the tag dictionary.
            </param>
            <param name="caseSensitive">
            Specifies whether the tag dictionary is case sensitive or not.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupList.#ctor(System.IO.StreamReader,System.Boolean)">
            <summary>
            Create tag dictionary object with contents of specified file and using specified case to determine how to access entries in the tag dictionary.
            </summary>
            <param name="reader">
            A reader for the tag dictionary.
            </param>
            <param name="caseSensitive">
            Specifies whether the tag dictionary is case sensitive or not.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupList.GetTags(System.String)">
            <summary>
            Returns a list of valid tags for the specified word. </summary>
            <param name="word">
            The word.
            </param>
            <returns>
            A list of valid tags for the specified word or null if no information is available for that word.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.PosTagger.PosLookupListWriter">
            <summary>
            Class that helps generate part-of-speech lookup list files.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupListWriter.#ctor(System.String)">
            <summary>
            Creates a new part-of-speech lookup list, specifying the location to write it to.
            </summary>
            <param name="file">
            File to write the new list to.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupListWriter.AddEntry(System.String,System.String)">
            <summary>
            Adds an entry to the lookup list in memory, ready for writing to file.
            </summary>
            <param name="word">
            The word for which an entry should be added.
            </param>
            <param name="tag">
            The tag that should be marked as valid for this word.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupListWriter.Write">
            <summary>
            Write the lookup list entries to file with a default cutoff of 5.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.PosTagger.PosLookupListWriter.Write(System.Int32)">
            <summary>
            Write the lookup list entries to file.
            </summary>
            <param name="cutoff">
            The number of times a word must have been added to the lookup list for it to be considered important
            enough to write to file.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.DefaultEndOfSentenceScanner">
            <summary>
            The default end of sentence scanner implements all of the
            EndOfSentenceScanner methods in terms of the GetPositions(char[])
            method.  It scans for
            . ? ! "
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner">
            <summary>
            Scans strings, StringBuilders, and char[] arrays for the offsets of
            sentence ending characters.
            
            <p>Implementations of this interface can use regular expressions,
            hand-coded DFAs, and other scanning techniques to locate end of
            sentence offsets.</p>
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner.GetPositions(System.String)">
            <summary>
            The receiver scans 'input' for sentence ending characters and
            returns their offsets.
            </summary>
            <param name="input">
            a <code>string</code> value
            </param>
            <returns>
            a <code>List</code> of integers.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner.GetPositions(System.Text.StringBuilder)">
            <summary>
            The receiver scans 'buffer' for sentence ending characters and
            returns their offsets.
            </summary>
            <param name="buffer">
            a <code>StringBuilder</code> value
            </param>
            <returns>
            a <code>List</code> of integers.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner.GetPositions(System.Char[])">
            <summary>
            The receiver scans 'characterBuffer' for sentence ending characters and
            returns their offsets.
            </summary>
            <param name="characterBuffer">
            a <code>char[]</code> value
            </param>
            <returns>
            a <code>List</code> of integers.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.DefaultEndOfSentenceScanner.#ctor">
            <summary> 
            Creates a new <code>DefaultEndOfSentenceScanner</code> instance.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.EnglishMaximumEntropySentenceDetector">
            <summary>
            A sentence detector which uses a model trained on English data (Wall Street
            Journal text).
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector">
            <summary>
            A sentence detector for splitting up raw text into sentences.  A maximum
            entropy model is used to evaluate the characters ".", "!", and "?" in a
            string to determine if they signify the end of a sentence.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.ISentenceDetector">
            <summary> 
            The interface for sentence detectors, which find the sentence boundaries in
            a text.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.ISentenceDetector.SentenceDetect(System.String)">
            <summary> 
            Sentence detect a string.
            </summary>
            <param name="input">
            The string to be sentence detected.
            </param>
            <returns>
            The string[] with the individual sentences as the array
            elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.ISentenceDetector.SentencePositionDetect(System.String)">
            <summary> 
            Sentence detect a string.
            </summary>
            <param name="input">
            The string to be sentence detected.
            </param>
            <returns>
            An int[] with the starting offset positions of each
            detected sentence. 
            </returns>
        </member>
        <member name="F:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.mModel">
            <summary>
            The maximum entropy model to use to evaluate contexts.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.mContextGenerator">
            <summary>
            The feature context generator.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.mScanner">
            <summary>
            The EndOfSentenceScanner to use when scanning for end of
            sentence offsets.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.mSentenceProbs">
            <summary>
            The list of probabilities associated with each decision
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.#ctor(SharpEntropy.IMaximumEntropyModel)">
            <summary>
            Constructor which takes a IMaximumEntropyModel and calls the three-arg
            constructor with that model, a SentenceDetectionContextGenerator, and the
            default end of sentence scanner.
            </summary>
            <param name="model">
            The MaxentModel which this SentenceDetectorME will use to
            evaluate end-of-sentence decisions.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.#ctor(SharpEntropy.IMaximumEntropyModel,SharpEntropy.IContextGenerator{OpenNLP.Tools.Util.Pair{System.Text.StringBuilder,System.Int32}})">
            <summary>
            Constructor which takes a IMaximumEntropyModel and a IContextGenerator.
            calls the three-arg constructor with a default ed of sentence scanner.
            </summary>
            <param name="model">
            The MaxentModel which this SentenceDetectorME will use to
            evaluate end-of-sentence decisions.
            </param>
            <param name="contextGenerator">
            The IContextGenerator object which this MaximumEntropySentenceDetector
            will use to turn strings into contexts for the model to
            evaluate.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.#ctor(SharpEntropy.IMaximumEntropyModel,SharpEntropy.IContextGenerator{OpenNLP.Tools.Util.Pair{System.Text.StringBuilder,System.Int32}},OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner)">
            <summary> 
            Creates a new <code>MaximumEntropySentenceDetector</code> instance.
            </summary>
            <param name="model">
            The IMaximumEntropyModel which this MaximumEntropySentenceDetector will use to
            evaluate end-of-sentence decisions.
            </param>
            <param name="contextGenerator">The IContextGenerator object which this MaximumEntropySentenceDetector
            will use to turn strings into contexts for the model to
            evaluate.
            </param>
            <param name="scanner">the EndOfSentenceScanner which this MaximumEntropySentenceDetector
            will use to locate end of sentence indexes.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.GetSentenceProbabilities">
            <summary>
            Returns the probabilities associated with the most recent
            calls to SentenceDetect().
            </summary>
            <returns>
            probability for each sentence returned for the most recent
            call to SentenceDetect.  If not applicable an empty array is
            returned.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.SentenceDetect(System.String)">
            <summary> 
            Detect sentences in a string.
            </summary>
            <param name="input">
            The string to be processed.
            </param>
            <returns>   
            A string array containing individual sentences as elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.SentencePositionDetect(System.String)">
            <summary> 
            Detect the position of the first words of sentences in a string.
            </summary>
            <param name="input">
            The string to be processed.
            </param>
            <returns>
            A integer array containing the positions of the end index of
            every sentence
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.IsAcceptableBreak(System.String,System.Int32,System.Int32)">
            <summary>
            Allows subclasses to check an overzealous (read: poorly
            trained) model from flagging obvious non-breaks as breaks based
            on some boolean determination of a break's acceptability.
            
            <p>The implementation here always returns true, which means
            that the IMaximumEntropyModel's outcome is taken as is.</p>
            </summary>
            <param name="input">
            the string in which the break occured. 
            </param>
            <param name="fromIndex">
            the start of the segment currently being evaluated 
            </param>
            <param name="candidateIndex">
            the index of the candidate sentence ending 
            </param>
            <returns> true if the break is acceptable 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.MaximumEntropySentenceDetector.TrainModel(System.String,System.Int32,System.Int32,OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner)">
            <summary> Use this training method if you wish to supply an end of
            sentence scanner which provides a different set of ending chars
            other than the default ones.  They are "\\.|!|\\?|\\\"|\\)".
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.EnglishMaximumEntropySentenceDetector.#ctor(System.String)">
            <summary>
            Constructor which loads the English sentence detection model
            transparently.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator">
            <summary> 
            Generate event contexts for maxent decisions for sentence detection.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator.#ctor(System.Char[])">
            <summary>
            Creates a new <code>SentenceDetectionContextGenerator</code> instance with
            no induced abbreviations.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator.#ctor(OpenNLP.Tools.Util.Set{System.String},System.Char[])">
            <summary> 
            Creates a new <code>SentenceDetectionContextGenerator</code> instance which uses
            the set of induced abbreviations.
            </summary>
            <param name="inducedAbbreviations">
            a <code>Set</code> of strings
            representing induced abbreviations in the training data.
            Example: Mr.
            </param>
            <param name="endOfSentenceCharacters">
            Character array of end of sentence characters.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator.GetContext(OpenNLP.Tools.Util.Pair{System.Text.StringBuilder,System.Int32})">
            <summary>
            Builds up the list of features, anchored around a position within the
            StringBuilder. 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator.PreviousSpaceIndex(System.Text.StringBuilder,System.Int32)">
            <summary> 
            Finds the index of the nearest space before a specified index.
            </summary>
            <param name="buffer">
            The string buffer which contains the text being examined.
            </param>
            <param name="seek">
            The index to begin searching from.
            </param>
            <returns>
            The index which contains the nearest space.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionContextGenerator.NextSpaceIndex(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
             Finds the index of the nearest space after a specified index.
            </summary>
            <param name="buffer">
            The string buffer which contains the text being examined.
            </param>
            <param name="seek">
            The index to begin searching from.
            </param>
            <param name="lastIndex">
            The highest index of the StringBuffer sb.
            </param>
            <returns>
            The index which contains the nearest space.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.SentenceDetectionEvent">
            <summary>
            An Event which can hold a pointer to another Event for use in a
            linked list.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionEvent.#ctor(System.String,System.String[])">
            <summary> 
            package access only
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.SentenceDetect.SentenceDetectionEventReader">
            <summary>
            An implementation of ITrainingEventReader which assumes that it is receiving
            its data as one (valid) sentence per token.  The default DataReader
            to use with this class is PlainTextByLineDataReader, but you can
            provide other types of ITrainingDataReaders if you wish to receive data from
            sources other than plain text files; however, be sure that each
            token your ITrainingDataReader returns is a valid sentence.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String})">
            <summary>
            Creates a new <code>SentenceDetectionEventReader</code> instance.  A
            DefaultEndOfSentenceScanner is used to locate sentence endings.
            </summary>
            <param name="dataReader">a <code>ITrainingDataReader</code> value
            </param>
        </member>
        <member name="M:OpenNLP.Tools.SentenceDetect.SentenceDetectionEventReader.#ctor(SharpEntropy.ITrainingDataReader{System.String},OpenNLP.Tools.SentenceDetect.IEndOfSentenceScanner)">
            <summary>
            Class constructor which uses the EndOfSentenceScanner to locate
            sentence endings.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.EnglishMaximumEntropyTokenizer">
            <summary> 
            A tokenizer which uses default English data for the maximum entropy model.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer">
            <summary>
            A Tokenizer for converting raw text into separated tokens.  It uses
            Maximum Entropy to make its decisions.  The features are loosely
            based on Jeff Reynar's UPenn thesis "Topic Segmentation:
            Algorithms and Applications.", which is available from his
            homepage: http://www.cis.upenn.edu/~jcreynar.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.ITokenizer">
            <summary> 
            The interface for tokenizers, which turn messy text into nicely segmented
            text tokens.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.ITokenizer.Tokenize(System.String)">
            <summary> 
            Tokenize a string.
            </summary>
            <param name="input">
            The string to be tokenized.
            </param>
            <returns>
            The string[] with the individual tokens as the array
            elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.ITokenizer.TokenizePositions(System.String)">
            <summary> 
            Tokenize a string.
            </summary>
            <param name="input">
            The string to be tokenized.
            </param>
            <returns>
            The Span[] with the spans (offsets into input) for each
            token as the individuals array elements.
            </returns>
        </member>
        <member name="F:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.mModel">
            <summary>
            the maximum entropy model to use to evaluate contexts.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.mContextGenerator">
            <summary>
            The context generator.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.mAlphaNumericOptimization">
            <summary>
            optimization flag to skip alpha numeric tokens for further
            tokenization 
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.mTokenProbabilities">
            <summary>
            list of probabilities for each token returned from call to
            Tokenize() 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.#ctor(SharpEntropy.IMaximumEntropyModel)">
            <summary>
            Class constructor which takes the string locations of the
            information which the maxent model needs.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.TokenizePositions(System.String)">
            <summary> 
            Tokenizes the string.
            </summary>
            <param name="input">
            The string to be tokenized.
            </param>
            <returns>
            A span array containing individual tokens as elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.Tokenize(System.String)">
            <summary> 
            Tokenize a string.
            </summary>
            <param name="input">
            The string to be tokenized.
            </param>
            <returns>   
            A string array containing individual tokens as elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.Split(System.String)">
            <summary>
            Constructs a list of Span objects, one for each whitespace
            delimited token. Token strings can be constructed form these
            spans as follows: input.Substring(span.Start, span.End);
            </summary>
            <param name="input">
            string to tokenize.
            </param>
            <returns> 
            Array of spans.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.GetTokenProbabilities">
            <summary>
            Returns the probabilities associated with the most recent
            calls to Tokenize() or TokenizePositions().
            </summary>
            <returns>
            probability for each token returned for the most recent
            call to tokenize.  If not applicable an empty array is
            returned.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Tokenize.MaximumEntropyTokenizer.AlphaNumericOptimization">
            <summary>
            Used to have the tokenizer ignore tokens which only contain alpha-numeric characters.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.TokenContextGenerator">
            <summary>
             Generate events for maxent decisions for tokenization.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.TokenContextGenerator.GetContext(OpenNLP.Tools.Util.Pair{System.String,System.Int32})">
            <summary>
            Builds up the list of features based on the information in the object,
            which is a pair containing a string and and integer which
            indicates the index of the position we are investigating.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.TokenContextGenerator.AddCharPredicates(System.String,System.Char,System.Collections.Generic.List{System.String})">
            <summary>
            Helper function for GetContext.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.TokenEventReader">
            <summary>
            Generate event contexts for maxent decisions for tokenization detection.
            This is currently not used.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Tokenize.TokenEventReader.#ctor(System.IO.StreamReader)">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Tokenize.TokenSpanEventReader">
            <summary>
            An implementation of ITrainingEventReader which allows events to be added by 
            offset and returns events for these offset-based tokens.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.Cache">
            <summary>
             Provides fixed size, pre-allocated, least recently used replacement cache.
             </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mFirstElement">
            <summary>
            The element in the linked list which was most recently used.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mLastElement">
            <summary>
            The element in the linked list which was least recently used.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mLastKey">
            <summary>
            Temporary holder of the key of the least-recently-used element.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mTempSwapWrapper">
            <summary>
            Temporary value used in swap.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mWrappers">
            <summary>
            Holds the object wrappers which the keys are mapped to.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mMap">
            <summary>
            Hashtable which stores the keys and values of the cache.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache.mCacheSize">
            <summary>
            The size of the cache.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Cache.#ctor(System.Int32)">
            <summary>
            Creates a new cache of the specified size.
            </summary>
            <param name="size">
            The size of the cache.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Util.DoubleLinkedListElement">
            <summary>
            An entry in a double-linked list.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.DoubleLinkedList">
            <summary>
            A double-linked list implementation.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache`2.mMap">
            <summary>
            Hashtable which stores the keys of the cache.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache`2.mList">
            <summary>
            Double-linked list which stores the values of the cache.
            </summary>
        </member>
        <member name="F:OpenNLP.Tools.Util.Cache`2.mCacheSize">
            <summary>
            The size of the cache.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Cache`2.#ctor(System.Int32)">
            <summary>
            Creates a new cache of the specified size.
            </summary>
            <param name="size">
            The size of the cache.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Util.CollectionEventReader">
            <summary>
            Creates an event stream out of a collection of events.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.CountedSet`1">
            <summary>
            Set which counts the number of times a values are added to it.  
            This value can be accessed with the GetCount method.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.CountedSet`1.#ctor">
            <summary> Creates a new counted set.</summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.CountedSet`1.#ctor(System.Int32)">
            <summary>
            Creates a new counted set of the specified initial size.
            </summary>
            <param name="size">
            The initial size of this set.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.CountedSet`1.Subtract(`0)">
            <summary>
            Reduces the count associated with this object by 1.  If this causes the count
            to become 0, then the object is removed form the set.
            </summary>
            <param name="item">The item whose count is being reduced.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.CountedSet`1.SetCount(`0,System.Int32)">
            <summary>
            Assigns the specified object the specified count in the set.
            </summary>
            <param name="item">
            The item to be added or updated in the set.
            </param>
            <param name="count">
            The count of the specified item.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.CountedSet`1.GetCount(`0)">
            <summary> Return the count of the specified object.</summary>
            <param name="item">the object whose count needs to be determined.
            </param>
            <returns> the count of the specified object.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.HashList`2">
            <summary>
            Class which creates mapping between keys and a list of values.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.HashSet`1">
            <summary> 
            This class manages a hash set of elements.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.Set`1">
            <summary>
            This class manages a set of elements.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.#ctor">
            <summary>
            Creates a new set.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new set initialized with ICollection object
            </summary>
            <param name="collection">
            ICollection object to initialize the set object
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.#ctor(System.Int32)">
            <summary>
            Creates a new set initialized with a specific capacity.
            </summary>
            <param name="capacity">
            value to set the capacity of the set object
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.Add(`0)">
            <summary>
            Adds an element to the set.
            </summary>
            <param name="item">
            The object to be added.
            </param>
            <returns>
            True if the object was added, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements contained in the specified collection.
            </summary>
            <param name="collection">
            The collection used to extract the elements that will be added.
            </param>
            <returns>
            Returns true if all the elements were successfuly added. Otherwise returns false.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.ContainsAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Verifies that all the elements of the specified collection are contained into the current collection. 
            </summary>
            <param name="collection">
            The collection used to extract the elements that will be verified.
            </param>
            <returns>
            True if the collection contains all the given elements.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.IsEmpty">
            <summary>
            Verifies if the collection is empty.
            </summary>
            <returns>
            True if the collection is empty, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.Remove(`0)">
            <summary>
            Removes an element from the set.
            </summary>
            <param name="elementToRemove">
            The element to be removed.
            </param>
            <returns>
            True if the element was removed.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes all the elements contained in the specified collection.
            </summary>
            <param name="collection">
            The collection used to extract the elements that will be removed.
            </param>
            <returns>
            True if all the elements were successfuly removed, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.RetainAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes all the elements that aren't contained in the specified collection.
            </summary>
            <param name="collection">
            The collection used to verify the elements that will be retained.
            </param>
            <returns>
            True if all the elements were successfully removed, false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Set`1.ToArray(`0[])">
            <summary>
            Obtains an array containing all the elements in the collection.
            </summary>
            <param name="objects">
            The array into which the elements of the collection will be stored.
            </param>
            <returns>
            The array containing all the elements of the collection.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.HashSet`1.#ctor">
            <summary>
            Creates a new hash set collection.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.HashSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new hash set collection.
            </summary>
            <param name="collection">
            The collection to initialize the hash set with.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.HashSet`1.#ctor(System.Int32)">
            <summary>
            Creates a new hash set with the given capacity.
            </summary>
            <param name="capacity">
            The initial capacity of the hash set.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.HashSet`1.#ctor(System.Int32,System.Single)">
            <summary>
            Creates a new hash set with the given capacity.
            </summary>
            <param name="capacity">
            The initial capacity of the hash set.
            </param>
            <param name="loadFactor">
            The load factor of the hash set.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.HashSet`1.HashSetClone">
            <summary>
            Creates a copy of the HashSet.
            </summary>
            <returns> A copy of the HashSet.</returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.IHeap`1">
            <summary>
            Inteface for interacting with a Heap data structure.
            This implementation extract objects from smallest to largest based on either
            their natural ordering or the comparator provided to an implementation.
            While this is a typical of a heap it allows this objects natural ordering to
            match that of other sorted collections.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.IHeap`1.Extract">
            <summary>
            Removes the smallest element from the heap and returns it.
            </summary>
            <returns>
            The smallest element from the heap.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.IHeap`1.Add(`0)">
            <summary>
            Adds the specified object to the heap.
            </summary>
            <param name="input">
            The object to add to the heap.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.IHeap`1.Clear">
            <summary>
            Clears the contents of the heap.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Util.IHeap`1.Top">
            <summary>
            Returns the smallest element of the heap.
            </summary>
            <returns>
            The top element of the heap.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.IHeap`1.Size">
            <summary>
            Returns the size of the heap.
            </summary>
            <returns>
            The size of the heap.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.IHeap`1.IsEmpty">
             <summary>
             Returns whether the heap is empty.
             </summary>
             <returns> 
             true if the heap is empty; false otherwise.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.ListHeap`1">
            <summary>
            This class implements the heap interface using a generic List as the underlying
            data structure.  This heap allows values which are equals to be inserted, however
            the order in which they are extracted is arbitrary.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.ListHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new heap with the specified size using the sorted based on the
            specified comparator.
            </summary>
            <param name="size">
            The size of the heap.
            </param>
            <param name="comparer">
            The comparer to be used to sort heap elements.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.ListHeap`1.#ctor(System.Int32)">
            <summary>
            Createa a new heap of the specified size.
            </summary>
            <param name="size">
            The size of the new heap.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.ListHeap`1.ResetSize">
            <summary>
            Resets the heap size to its original value.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Util.ListHeap`1.IsEmpty">
            <summary>
            True if the heap is empty.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Util.ListHeap`1.Size">
            <summary>
            The size of the heap.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Util.ListHeap`1.Top">
            <summary>
            Gets the object on top of the heap.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.Pair`2">
            <summary>
             Dinky class to package pairs of things
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor for the Pair object.
            </summary>
            <param name="first">
            First object to add to the Pair.
            </param>
            <param name="second">
            Second object to add to the Pair.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Pair`2.ToString">
            <summary>
            Lists the values of the Pair object.
            </summary>
            <returns>
            String value.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.Pair`2.FirstValue">
            <summary>
            Value of the first object in the Pair.
            </summary>
        </member>
        <member name="P:OpenNLP.Tools.Util.Pair`2.SecondValue">
            <summary>
            Value of the second object in the Pair.
            </summary>
        </member>
        <member name="T:OpenNLP.Tools.Util.Sequence">
            <summary>Represents a weighted sequence of outcomes. </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.#ctor">
            <summary>
            Creates a new sequence of outcomes.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.#ctor(OpenNLP.Tools.Util.Sequence)">
            <summary>
            Creates a new sequence of outcomes by cloning an existing sequence.
            </summary>
            <param name="sequenceToCopy">
            The sequence to create the clone from.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.#ctor(OpenNLP.Tools.Util.Sequence,System.String,System.Double)">
            <summary>
            Creates a new sequence of outcomes based on an existing sequence.
            </summary>
            <param name="sequenceToCopy">
            The sequence to base the new sequence on.
            </param>
            <param name="outcome">
            An additional outcome to add onto the sequence.
            </param>
            <param name="probability">
            An existing probability to add onto the sequence.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new sequence of outcomes based on a list of outcomes.
            Each is given a probability of 1.
            </summary>
            <param name="outcomes">
            List of outcomes to create the sequence from.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.CompareTo(System.Object)">
            <summary>
            Compares two Sequence objects.
            </summary>
            <param name="o">
            Object to compare this Sequence to.
            </param>
            <returns>
            Value indicating which sequence is the larger.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.Equals(System.Object)">
            <summary>
            Tests for equality of Sequence objects.
            </summary>
            <param name="o">
            Object to compare this Sequence to.
            </param>
            <returns>
            True if the objects are equal; false otherwise.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.Add(System.String,System.Double)">
            <summary>
            Adds an outcome and probability to this sequence.
            </summary>
            <param name="outcome">
            the outcome to be added.
            </param>
            <param name="probability">
            the probability associated with this outcome.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.GetProbabilities">
            <summary>
            Returns an array of probabilities associated with the outcomes of this sequence.
            </summary>
            <returns>
            an array of probabilities.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Sequence.GetProbabilities(System.Double[])">
            <summary>
            Populates an array with the probabilities associated with the outcomes of this sequence.</summary>
            <param name="probabilities">
            a pre-allocated array to use to hold the values of the probabilities of the outcomes for this sequence.
            </param>
        </member>
        <member name="P:OpenNLP.Tools.Util.Sequence.Outcomes">
            <summary>
            Returns a list of outcomes for this sequence.
            </summary>
            <returns> a list of outcomes.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.Sequence.Score">
            <summary>
            Returns the score of this sequence.
            </summary>
            <returns>
            The score of this sequence.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.SortedSet`1">
            <summary>
            This class contains methods to manage a sorted collection.
            RN note: this class (taken from the JLCA "support" code) doesn't actually
            sort anything.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.SortedSet`1.#ctor">
            <summary>
            Creates a new SortedSet.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.SortedSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create a new SortedSet with a specific collection.
            </summary>
            <param name="collection">
            The collection used to iniciatilize the SortedSetSupport
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.SortedSet`1.First">
            <summary>
            Returns the first element from the set.
            </summary>
            <returns>
            Returns the first element from the set.
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.SortedSet`1.Last">
            <summary>
            Returns the last element of the set.
            </summary>
            <returns>Returns the last element from the set.</returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.Span">
            <summary>
            Class for storing start and end integer offsets.  
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.Span.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new Span object.
            </summary>
            <param name="startOfSpan">
            start of span.
            </param>
            <param name="endOfSpan">
            end of span.
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.Span.Contains(OpenNLP.Tools.Util.Span)">
            <summary>
            Returns true is the specified span is contained by this span.  
            Identical spans are considered to contain each other. 
            </summary>
            <param name="span">
            The span to compare with this span.
            </param>
            <returns>
            true if the specified span is contained by this span; false otherwise. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Span.Intersects(OpenNLP.Tools.Util.Span)">
            <summary>
            Returns true if the specified span intersects with this span.
            </summary>
            <param name="span">
            The span to compare with this span. 
            </param>
            <returns>
            true is the spans overlap; false otherwise. 
            </returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.Span.Crosses(OpenNLP.Tools.Util.Span)">
            <summary>
            Returns true if the specified span crosses this span.
            </summary>
            <param name="span">
            The span to compare with this span.
            </param>
            <returns>
            true if the specified span overlaps this span and contains a non-overlapping section; false otherwise.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.Span.Start">
            <summary>
            Return the start of a span.
            </summary>
            <returns> 
            the start of a span.
            </returns>
        </member>
        <member name="P:OpenNLP.Tools.Util.Span.End">
            <summary>
            Return the end of a span.
            </summary>
            <returns> 
            the end of a span.
            </returns>
        </member>
        <member name="T:OpenNLP.Tools.Util.StringTokenizer">
            <summary>
            Class providing simple tokenization of a string, for manipulation.  
            For NLP tokenizing, see the OpenNLP.Tools.Tokenize namespace.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            </summary>
            <param name="input">
            String to tokenize
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Util.TreeHeap`1">
            <summary>
            An implemention of the heap interface based on SortedSet.
            This implementation will not allow multiple objects which are equal to be added to the heap.
            Only use this implementation when object in the heap can be totally ordered (no duplicates). 
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeHeap`1.#ctor">
            <summary> Creates a new tree heap.</summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeHeap`1.#ctor(System.Int32)">
            <summary>
            Creates a new tree heap of the specified size.
            </summary>
            <param name="size">
            The size of the new tree heap.
            </param>
        </member>
        <member name="T:OpenNLP.Tools.Util.TreeSet`1">
            <summary>
            This class manages a tree set collection of sorted elements.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeSet`1.#ctor">
            <summary>
            Creates a new TreeSet.
            </summary>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create a new TreeSet with a specific collection.
            </summary>
            <param name="collection">
            The collection used to initialize the TreeSet
            </param>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeSet`1.TreeSetClone">
            <summary>
            Creates a copy of the TreeSet.
            </summary>
            <returns>A copy of the TreeSet.</returns>
        </member>
        <member name="M:OpenNLP.Tools.Util.TreeSet`1.Size">
            <summary>
            Retrieves the number of elements contained in the set.
            </summary>
            <returns>
            An integer value that represent the number of element in the set.
            </returns>
        </member>
    </members>
</doc>
